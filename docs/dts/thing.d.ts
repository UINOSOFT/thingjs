/**
 * @property object - The object.
 * @property options - The options.
 */
declare type BaseActionData = {
    object: THING.BaseObject;
    options: any;
};

/**
 * @property position - The position.
 * @property normal - The normal.
 * @property uv - The uv.
 * @property index - The index of position.
 */
declare type MeshResult = {
    position: Number[];
    normal: Number[];
    uv: Number[];
    index: Number[];
};

/**
 * The function to call when stop action.
 */
declare type OnActionProcessorStop = () => void;

/**
 * The function to call when run action.
 * @param options - The options.
 */
declare type OnActionProcessorRun = (options: any) => Promise<any>;

/**
 * The function to call when run action.
 * @param value - The value.
 */
declare type OnActionProcessorEnable = (value: boolean) => void;

declare type ActionProcessor = {
    onStop: OnActionProcessorStop;
    onRun: OnActionProcessorRun;
    onEnable: OnActionProcessorEnable;
};

/**
 * The function to call when traverse action processor.
 */
declare type OnTraverseActionProcessorCallback = () => void;

/**
 * BaseState
The base state.
 */
declare class BaseState {
}

/**
 * @property url - The auth resource url.
 * @property wasmRootPath - The wasm root path.
 * @property method - The request method.
 * @property requestHeaders - The request headers.
 * @property postFields - The post field when using 'POST' method.
 * @property maxWorkerNumber - The max worker number, -1 indicates use as default.
 */
declare type loginOptions = {
    url: string;
    wasmRootPath: string;
    method: string;
    requestHeaders: string;
    postFields: string;
    maxWorkerNumber: number;
};

/**
 * When initialize component.
 */
declare type OnInitComponentCallback = () => void;

/**
 * When load resource.
 */
declare type OnLoadResourceComponentCallback = () => void;

/**
 * When unload resource.
 */
declare type OnUnloadResourceComponentCallback = () => void;

/**
 * When update component.
 * @param deltaTime - The delta time in seconds.
 */
declare type OnUpdateComponentCallback = (deltaTime: number) => void;

/**
 * Get the center position.
 * @param target - The target to save result.
 */
declare type GetCenterFunction = (target: Number[]) => Number[];

/**
 * Convert self position to world position.
 * @param position - The world position.
 * @param ignoreScale - True indicates to ignore scale.
 * @param target - The target to save result.
 */
declare type SelfToWorldFunction = (position: Number[], ignoreScale: boolean, target: Number[]) => Number[];

/**
 * Convert world position to screen position.
 * @param position - The world position.
 * @param target - The target to save result.
 */
declare type WorldToScreenFunction = (position: Number[], target: Number[]) => Number[];

/**
 * When parent change.
 * @param parent - The new parent.
 */
declare type OnParentChangeComponentCallback = (parent: THING.BaseObject) => void;

/**
 * When resize component.
 * @param width - The width in pixel.
 * @param height - The height in pixel.
 */
declare type OnResizeComponentCallback = (width: number, height: number) => void;

/**
 * When refresh component.
 */
declare type OnRefreshComponentCallback = () => void;

/**
 * When active state change.
 * @param value - The active state.
 */
declare type OnActiveChangeComponentCallback = (value: boolean) => void;

/**
 * When (body) visible change.
 * @param value - The visible state.
 */
declare type OnVisibleChangeComponentCallback = (value: boolean) => void;

/**
 * When copy component.
 * @param component - The component.
 */
declare type OnCopyComponentCallback = (component: THING.BaseComponent) => void;

/**
 * When add child object.
 * @param object - The child object.
 */
declare type OnAddChildComponentCallback = (object: THING.BaseObject) => void;

/**
 * When remove child object.
 * @param object - The child object.
 */
declare type OnRemoveChildComponentCallback = (object: THING.BaseObject) => void;

/**
 * When before add component.
 * @param object - The child object.
 */
declare type OnBeforeAddComponentCallback = (object: THING.BaseObject) => void;

/**
 * When after add component.
 */
declare type OnAfterAddComponentCallback = () => void;

/**
 * When before remove component.
 */
declare type OnBeforeRemoveComponentCallback = () => void;

/**
 * When after remove component.
 */
declare type OnAfterRemoveComponentCallback = () => void;

/**
 * When import data.
 * @param param - The parameters.
 */
declare type OnImportComponentCallback = (param: any) => void;

/**
 * When export data.
 */
declare type OnExportComponentCallback = () => any;

/**
 * The function to call when traverse component by type.
 * @param component - The component.
 * @param name - The component name.
 */
declare type TraverseComponentByTypeCallback = (component: THING.BaseComponent, name: string) => void;

/**
 * @property url - The resource URL(s).
 * @property data - The json data(s).
 */
declare type BlueprintComponentLoadArgs = {
    url: string | String[];
    data: any | object[];
};

/**
 * @property center - The center of light sphere.
 * @property radius - The radius of light sphere, 0 indicates use the radius of bounding box.
 * @property shadowRadius - The shadow's radius of light sphere, 0 indicates use the radius or radius of bounding box.
 */
declare type LightSphereInfo = {
    center: Number[];
    radius: number;
    shadowRadius: number;
};

/**
 * @property center - The center position.
 * @property halfSize - The half size.
 */
declare type BoundaryResult = {
    center: Number[];
    halfSize: Number[];
};

/**
 * Configuration about glow.
 * @property enable - True indicates enable it.
 * @property strength - The strength.
 * @property threshold - The threshold.
 * @property radius - True radius.
 */
declare type CameraGlowEffect = {
    enable: boolean;
    strength: number;
    threshold: number;
    radius: number;
};

/**
 * Configuration about inner glow.
 * @property enable - True indicates enable it.
 * @property color - The color.
 * @property strength - The strength.
 * @property stride - True stride.
 */
declare type CameraInnerGlowEffect = {
    enable: boolean;
    color: Number[];
    strength: number;
    stride: number;
};

/**
 * Configuration about tailing.
 * @property enable - True indicates enable it.
 * @property direction - The direction.
 * @property center - The center.
 */
declare type CameraTailingEffect = {
    enable: boolean;
    direction: Number[];
    center: Number[];
};

/**
 * Configuration about radial.
 * @property enable - True indicates enable it.
 * @property center - The center.
 */
declare type CameraRadialEffect = {
    enable: boolean;
    center: Number[];
};

/**
 * Configuration about ghosting.
 * @property enable - True indicates enable it.
 * @property center - The center.
 */
declare type CameraGhostingEffect = {
    enable: boolean;
    center: Number[];
};

/**
 * Configuration about line bloom.
 * @property enable - True indicates enable it.
 * @property blendRate - The blend rate.
 * @property blurSize - The blur size.
 * @property strength - The strength.
 */
declare type CameraLineBloomEffect = {
    enable: boolean;
    blendRate: number;
    blurSize: number;
    strength: number;
};

/**
 * @property object - The object.
 * @property position - The picked position.
 * @property pickedId - The picked Id.
 * @property external - The external info.
 */
declare type PickResult = {
    object: THING.BaseObject;
    position: Number[];
    pickedId: number;
    external: any;
};

/**
 * When start to active component(just only once) in async mode.
 * @param param - The initial parameters.
 */
declare type OnStartAsyncComponentCallback = (param: any) => Promise<any>;

/**
 * When update before render.
 * @param deltaTime - The delta time in seconds.
 */
declare type OnLateUpdateComponentCallback = (deltaTime: number) => void;

/**
 * @property visible - The visible state.
 * @property color - The color.
 * @property mode - The mode.
 */
declare type BoxHelperResult = {
    visible: boolean;
    color: Number[];
    mode: BoxHelperModeType;
};

/**
 * The level event info.
 * @property path - The level path.
 * @property origin - The original level object.
 * @property prev - The previous level object.
 * @property current - The current level object.
 * @property next - The next level object (only for leave operation).
 * @property options - The level options.
 */
declare type LevelEventInfo = {
    path: THING.BaseObject[];
    origin: THING.BaseObject;
    prev: THING.BaseObject;
    current: THING.BaseObject;
    next: THING.BaseObject;
    options: any;
};

/**
 * When leave self level in async mode.
 * @param ev - The event info.
 * @param resolve - The promise resolve callback function.
 * @param reject - The promise reject callback function.
 */
declare type OnLeaveLevelAsyncCallback = (ev: LevelEventInfo, resolve: (...params: any[]) => any, reject: (...params: any[]) => any) => void;

/**
 * When leave self level.
 * @param ev - The event info.
 */
declare type OnLeaveLevelCallback = (ev: LevelEventInfo) => void;

/**
 * When enter self level in async mode.
 * @param ev - The event info.
 * @param resolve - The promise resolve callback function.
 * @param reject - The promise reject callback function.
 */
declare type OnEnterLevelAsyncCallback = (ev: LevelEventInfo, resolve: (...params: any[]) => any, reject: (...params: any[]) => any) => void;

/**
 * When enter self level.
 * @param ev - The event info.
 */
declare type OnEnterLevelCallback = (ev: LevelEventInfo) => void;

/**
 * When enter self level finished.
 * @param ev - The event info.
 */
declare type OnFinishedEnterLevelCallback = (ev: LevelEventInfo) => void;

/**
 * The level config.
 * @property ignoreVisible - Ignore the level setting object visibility.
 * @property ignoreEvent - Ignore mouse events for level settings objects.
 */
declare type LevelConfig = {
    ignoreVisible: boolean;
    ignoreEvent: boolean;
};

/**
 * The viewpoint.
 * @property position - the camera position
 * @property target - the camera target position
 */
declare type Viewpoint = {
    position: Number[];
    target: Number[];
};

/**
 * @property type - The event type in lowercase.
 * @property altKey - Check whether press alt key.
 * @property ctrlKey - Check whether press control key.
 * @property shiftKey - Check whether press shift key.
 * @property deltaX - The delta-x of mouse cursor in pixel.
 * @property deltaY - The delta-y of mouse cursor in pixel.
 * @property x - The x position of mouse cursor in pixel.
 * @property y - The y position of mouse cursor in pixel.
 * @property object - The picked object(could be null).
 * @property pickedPosition - The picked position in world space.
 * @property normal - The normal direction in world space.
 */
declare type MouseEventData = {
    type: string;
    altKey: boolean;
    ctrlKey: boolean;
    shiftKey: boolean;
    deltaX: number;
    deltaY: number;
    x: number;
    y: number;
    object: THING.BaseObject;
    pickedPosition: Number[];
    normal: Number[];
};

/**
 * The event type.
 */
declare const enum EventType {
    /**
     * When application quit.
     */
    AppQuit = "AppQuit",
    /**
     * When update.
     */
    Update = "Update",
    /**
     * When application focus in.
     */
    FocusIn = "FocusIn",
    /**
     * When application focus out.
     */
    FocusOut = "FocusOut",
    /**
     * When application resize.
     */
    Resize = "Resize",
    /**
     * When mouse enter object.
     */
    MouseEnter = "MouseEnter",
    /**
     * When mouse leave object.
     */
    MouseLeave = "MouseLeave",
    /**
     * When mouse move.
     */
    MouseMove = "MouseMove",
    /**
     * When mouse button up.
     */
    MouseUp = "MouseUp",
    /**
     * When mouse button down.
     */
    MouseDown = "MouseDown",
    /**
     * When mouse wheel rolling.
     */
    Wheel = "Wheel",
    /**
     * When touch end.
     */
    Click = "Click",
    /**
     * When double touch end.
     */
    DBLClick = "DBLClick",
    /**
     * When key down.
     */
    KeyDown = "KeyDown",
    /**
     * When key up.
     */
    KeyUp = "KeyUp",
    /**
     * When key is pressing.
     */
    KeyPress = "KeyPress",
    /**
     * When drop file(s) into application container.
     */
    DropFiles = "DropFiles",
    /**
     * When enter state.
     */
    EnterState = "EnterState",
    /**
     * When leave state.
     */
    LeaveState = "LeaveState",
    /**
     * When register level action for level component at the first time
     */
    RegisterLevelAction = "RegisterLevelAction",
    /**
     * Before leave object level.
     */
    BeforeLeaveLevel = "BeforeLeaveLevel",
    /**
     * After leave object level.
     */
    AfterLeaveLevel = "AfterLeaveLevel",
    /**
     * Before enter object level.
     */
    BeforeEnterLevel = "BeforeEnterLevel",
    /**
     * After enter object level.
     */
    AfterEnterLevel = "AfterEnterLevel",
    /**
     * Complete object level entering.
     */
    CompleteEnterLevel = "CompleteEnterLevel",
    /**
     * When enter(hit) object's collider(just only once before leave collider).
     */
    ColliderEnter = "ColliderEnter",
    /**
     * When leave object's collider.
     */
    ColliderLeave = "ColliderLeave",
    /**
     * When create object event.
     */
    Create = "Create",
    /**
     * When load object resource event.
     */
    Load = "Load",
    /**
     * When loading object resources.
     */
    Progress = "Progress",
    /**
     * When load object resouces failed.
     */
    Error = "Error",
    /**
     * When before destroy object event.
     */
    BeforeDestroy = "BeforeDestroy",
    /**
     * When after destroy object event.
     */
    AfterDestroy = "AfterDestroy",
    /**
     * When before add child into object.
     */
    BeforeAddChild = "BeforeAddChild",
    /**
     * When after add child into object.
     */
    AfterAddChild = "AfterAddChild",
    /**
     * When before remove child from object.
     */
    BeforeRemoveChild = "BeforeRemoveChild",
    /**
     * When after remove child from object.
     */
    AfterRemoveChild = "AfterRemoveChild",
    /**
     * When object start to fly.
     */
    StartFlying = "StartFlying",
    /**
     * When object is flying.
     */
    Flying = "Flying",
    /**
     * When object stop to fly.
     */
    StopFlying = "StopFlying",
    /**
     * When object finish to fly.
     */
    CompleteFlying = "CompleteFlying",
    /**
     * When object active attribute changed.
     */
    ActiveChange = "ActiveChange",
    /**
     * When object visible attribute changed.
     */
    VisibleChange = "VisibleChange",
    /**
     * When object stop to play animation.
     */
    StopAnimation = "StopAnimation",
    /**
     * When object start to play animation.
     */
    PlayAnimation = "PlayAnimation",
    /**
     * When object change attributes.
     */
    ChangeAttributes = "ChangeAttributes",
    /**
     * When camera enable viewport.
     */
    EnableViewport = "EnableViewport",
    /**
     * When camera is ready to start changing.
     */
    CameraChangePreStart = "CameraChangePreStart",
    /**
     * When camera starts to change.
     */
    CameraChangeStart = "CameraChangeStart",
    /**
     * When camera is changing.
     */
    CameraChange = "CameraChange",
    /**
     * When camera is ready to end change.
     */
    CameraChangePreEnd = "CameraChangePreEnd",
    /**
     * When camera ends changing.
     */
    CameraChangeEnd = "CameraChangeEnd",
    /**
     * When camera start to capture screen.
     */
    BeforeCameraCapture = "BeforeCameraCapture",
    /**
     * When camera finish to capture screen.
     */
    AfterCameraCapture = "AfterCameraCapture"
}

declare type Linear = {
    None: (...params: any[]) => any;
};

declare type Quadratic = {
    In: (...params: any[]) => any;
    Out: (...params: any[]) => any;
    InOut: (...params: any[]) => any;
};

declare type Cubic = {
    In: (...params: any[]) => any;
    Out: (...params: any[]) => any;
    InOut: (...params: any[]) => any;
};

declare type Quartic = {
    In: (...params: any[]) => any;
    Out: (...params: any[]) => any;
    InOut: (...params: any[]) => any;
};

declare type Quintic = {
    In: (...params: any[]) => any;
    Out: (...params: any[]) => any;
    InOut: (...params: any[]) => any;
};

declare type Sinusoidal = {
    In: (...params: any[]) => any;
    Out: (...params: any[]) => any;
    InOut: (...params: any[]) => any;
};

declare type Exponential = {
    In: (...params: any[]) => any;
    Out: (...params: any[]) => any;
    InOut: (...params: any[]) => any;
};

declare type Circular = {
    In: (...params: any[]) => any;
    Out: (...params: any[]) => any;
    InOut: (...params: any[]) => any;
};

declare type Elastic = {
    In: (...params: any[]) => any;
    Out: (...params: any[]) => any;
    InOut: (...params: any[]) => any;
};

declare type Back = {
    In: (...params: any[]) => any;
    Out: (...params: any[]) => any;
    InOut: (...params: any[]) => any;
};

declare type Bounce = {
    In: (...params: any[]) => any;
    Out: (...params: any[]) => any;
    InOut: (...params: any[]) => any;
};

/**
 * @example
 * http://sole.github.io/tween.js/examples/03_graphs.html
 */
declare type LerpType = {
    Linear: Linear;
    Quadratic: Quadratic;
    Cubic: Cubic;
    Quartic: Quartic;
    Quintic: Quintic;
    Sinusoidal: Sinusoidal;
    Exponential: Exponential;
    Circular: Circular;
    Elastic: Elastic;
    Back: Back;
    Bounce: Bounce;
};

/**
 * The loop type.
 */
declare const enum LoopType {
    /**
     * The value(s) change in repeat loop mode.
     */
    Repeat = "Repeat",
    /**
     * The value(s) change in ping-pong loop mode.
     */
    PingPong = "PingPong"
}

/**
 * The mouse button type.
 */
declare const enum MouseButtonType {
    /**
     * Invalid mouse button type.
     */
    None = "None",
    /**
     * The mouse left button type.
     */
    Left = "Left",
    /**
     * The mouse middle button type.
     */
    Middle = "Middle",
    /**
     * The mouse right button type.
     */
    Right = "Right"
}

/**
 * The space type.
 */
declare const enum SpaceType {
    /**
     * Base on self space.
     */
    Self = "Self",
    /**
     * Base on local space.
     */
    Local = "Local",
    /**
     * Base on world space.
     */
    World = "World"
}

/**
 * The code type.
 */
declare const enum CodeType {
    Escape = "Escape",
    Digit1 = "Digit1",
    Digit2 = "Digit2",
    Digit3 = "Digit3",
    Digit4 = "Digit4",
    Digit5 = "Digit5",
    Digit6 = "Digit6",
    Digit7 = "Digit7",
    Digit8 = "Digit8",
    Digit9 = "Digit9",
    Digit0 = "Digit0",
    Minus = "Minus",
    Equal = "Equal",
    Backspace = "Backspace",
    Tab = "Tab",
    KeyQ = "KeyQ",
    KeyW = "KeyW",
    KeyE = "KeyE",
    KeyR = "KeyR",
    KeyT = "KeyT",
    KeyY = "KeyY",
    KeyU = "KeyU",
    KeyI = "KeyI",
    KeyO = "KeyO",
    KeyP = "KeyP",
    BracketLeft = "BracketLeft",
    BracketRight = "BracketRight",
    Enter = "Enter",
    ControlLeft = "ControlLeft",
    KeyA = "KeyA",
    KeyS = "KeyS",
    KeyD = "KeyD",
    KeyF = "KeyF",
    KeyG = "KeyG",
    KeyH = "KeyH",
    KeyJ = "KeyJ",
    KeyK = "KeyK",
    KeyL = "KeyL",
    Semicolon = "Semicolon",
    Quote = "Quote",
    Backquote = "Backquote",
    ShiftLeft = "ShiftLeft",
    Backslash = "Backslash",
    KeyZ = "KeyZ",
    KeyX = "KeyX",
    KeyC = "KeyC",
    KeyV = "KeyV",
    KeyB = "KeyB",
    KeyN = "KeyN",
    KeyM = "KeyM",
    Comma = "Comma",
    Period = "Period",
    Slash = "Slash",
    ShiftRight = "ShiftRight",
    NumpadMultiply = "NumpadMultiply",
    AltLeft = "AltLeft",
    Space = "Space",
    CapsLock = "CapsLock",
    F1 = "F1",
    F2 = "F2",
    F3 = "F3",
    F4 = "F4",
    F5 = "F5",
    F6 = "F6",
    F7 = "F7",
    F8 = "F8",
    F9 = "F9",
    F10 = "F10",
    Pause = "Pause",
    ScrollLock = "ScrollLock",
    Numpad7 = "Numpad7",
    Numpad8 = "Numpad8",
    Numpad9 = "Numpad9",
    NumpadSubtract = "NumpadSubtract",
    Numpad4 = "Numpad4",
    Numpad5 = "Numpad5",
    Numpad6 = "Numpad6",
    NumpadAdd = "NumpadAdd",
    Numpad1 = "Numpad1",
    Numpad2 = "Numpad2",
    Numpad3 = "Numpad3",
    Numpad0 = "Numpad0",
    NumpadDecimal = "NumpadDecimal",
    F11 = "F11",
    F12 = "F12",
    F13 = "F13",
    F14 = "F14",
    F15 = "F15",
    F16 = "F16",
    F17 = "F17",
    F18 = "F18",
    F19 = "F19",
    F20 = "F20",
    F21 = "F21",
    F22 = "F22",
    F23 = "F23",
    F24 = "F24",
    NumpadComma = "NumpadComma",
    NumpadEnter = "NumpadEnter",
    ControlRight = "ControlRight",
    BrowserHome = "BrowserHome",
    NumpadDivide = "NumpadDivide",
    PrintScreen = "PrintScreen",
    AltRight = "AltRight",
    NumLock = "NumLock",
    Home = "Home",
    ArrowUp = "ArrowUp",
    PageUp = "PageUp",
    ArrowLeft = "ArrowLeft",
    ArrowRight = "ArrowRight",
    End = "End",
    ArrowDown = "ArrowDown",
    PageDown = "PageDown",
    Insert = "Insert",
    Delete = "Delete"
}

/**
 * The key code type.
 */
declare const enum KeyCodeType {
    /**
     * Backspace
     */
    Backspace = 8,
    /**
     * Tab
     */
    Tab = 9,
    /**
     * Enter
     */
    Enter = 13,
    /**
     * Shift
     */
    Shift = 16,
    /**
     * Ctrl
     */
    Ctrl = 17,
    /**
     * Alt
     */
    Alt = 18,
    /**
     * Pause
     */
    Pause = 19,
    /**
     * Capslock
     */
    Capslock = 20,
    /**
     * Escape
     */
    Escape = 27,
    /**
     * Space
     */
    Space = 32,
    /**
     * PageUp
     */
    PageUp = 33,
    /**
     * PageDown
     */
    PageDown = 34,
    /**
     * End
     */
    End = 35,
    /**
     * Home
     */
    Home = 36,
    /**
     * Left
     */
    Left = 37,
    /**
     * Up
     */
    Up = 38,
    /**
     * Right
     */
    Right = 39,
    /**
     * Down
     */
    Down = 40,
    /**
     * Insert
     */
    Insert = 45,
    /**
     * Delete
     */
    Delete = 46,
    /**
     * Key0
     */
    Key0 = 48,
    /**
     * Key1
     */
    Key1 = 49,
    /**
     * Key2
     */
    Key2 = 50,
    /**
     * Key3
     */
    Key3 = 51,
    /**
     * Key4
     */
    Key4 = 52,
    /**
     * Key5
     */
    Key5 = 53,
    /**
     * Key6
     */
    Key6 = 54,
    /**
     * Key7
     */
    Key7 = 55,
    /**
     * Key8
     */
    Key8 = 56,
    /**
     * Key9
     */
    Key9 = 57,
    /**
     * A
     */
    A = 65,
    /**
     * B
     */
    B = 66,
    /**
     * C
     */
    C = 67,
    /**
     * D
     */
    D = 68,
    /**
     * E
     */
    E = 69,
    /**
     * F
     */
    F = 70,
    /**
     * G
     */
    G = 71,
    /**
     * H
     */
    H = 72,
    /**
     * I
     */
    I = 73,
    /**
     * J
     */
    J = 74,
    /**
     * K
     */
    K = 75,
    /**
     * L
     */
    L = 76,
    /**
     * M
     */
    M = 77,
    /**
     * N
     */
    N = 78,
    /**
     * O
     */
    O = 79,
    /**
     * P
     */
    P = 80,
    /**
     * Q
     */
    Q = 81,
    /**
     * R
     */
    R = 82,
    /**
     * S
     */
    S = 83,
    /**
     * T
     */
    T = 84,
    /**
     * U
     */
    U = 85,
    /**
     * V
     */
    V = 86,
    /**
     * W
     */
    W = 87,
    /**
     * X
     */
    X = 88,
    /**
     * Y
     */
    Y = 89,
    /**
     * Z
     */
    Z = 90,
    /**
     * Select
     */
    Select = 93,
    /**
     * Numpad0
     */
    Numpad0 = 96,
    /**
     * Numpad1
     */
    Numpad1 = 97,
    /**
     * Numpad2
     */
    Numpad2 = 98,
    /**
     * Numpad3
     */
    Numpad3 = 99,
    /**
     * Numpad4
     */
    Numpad4 = 100,
    /**
     * Numpad5
     */
    Numpad5 = 101,
    /**
     * Numpad6
     */
    Numpad6 = 102,
    /**
     * Numpad7
     */
    Numpad7 = 103,
    /**
     * Numpad8
     */
    Numpad8 = 104,
    /**
     * Numpad9
     */
    Numpad9 = 105,
    /**
     * Multiply
     */
    Multiply = 106,
    /**
     * Add
     */
    Add = 107,
    /**
     * Subtract
     */
    Subtract = 109,
    /**
     * Decimal
     */
    Decimal = 110,
    /**
     * Divide
     */
    Divide = 111,
    /**
     * F1
     */
    F1 = 112,
    /**
     * F2
     */
    F2 = 113,
    /**
     * F3
     */
    F3 = 114,
    /**
     * F4
     */
    F4 = 115,
    /**
     * F5
     */
    F5 = 116,
    /**
     * F6
     */
    F6 = 117,
    /**
     * F7
     */
    F7 = 118,
    /**
     * F8
     */
    F8 = 119,
    /**
     * F9
     */
    F9 = 120,
    /**
     * F10
     */
    F10 = 121,
    /**
     * F11
     */
    F11 = 122,
    /**
     * F12
     */
    F12 = 123,
    /**
     * Numlock
     */
    Numlock = 144,
    /**
     * Scrolllock
     */
    Scrolllock = 145,
    /**
     * Semicolon
     */
    Semicolon = 186,
    /**
     * EqualSign
     */
    EqualSign = 187,
    /**
     * Comma
     */
    Comma = 188,
    /**
     * Dash
     */
    Dash = 189,
    /**
     * Period
     */
    Period = 190,
    /**
     * ForwardSlash
     */
    ForwardSlash = 191,
    /**
     * GraveAccent
     */
    GraveAccent = 192,
    /**
     * OpenBracket
     */
    OpenBracket = 219,
    /**
     * BackSlash
     */
    BackSlash = 220,
    /**
     * CloseBraket
     */
    CloseBraket = 221,
    /**
     * SingleQuote
     */
    SingleQuote = 222
}

/**
 * The axis type.
 */
declare const enum AxisType {
    /**
     * X-Axis
     */
    X = "X",
    /**
     * Y-Axis
     */
    Y = "Y",
    /**
     * Z-Axis
     */
    Z = "Z"
}

/**
 * The projection type.
 */
declare const enum ProjectionType {
    /**
     * Orthographic
     */
    Orthographic = "Orthographic",
    /**
     * Perspective
     */
    Perspective = "Perspective"
}

/**
 * The view mode type.
 */
declare const enum ViewMode {
    /**
     * Top
     */
    Top = "Top",
    /**
     * Bottom
     */
    Bottom = "Bottom",
    /**
     * Left
     */
    Left = "Left",
    /**
     * Right
     */
    Right = "Right",
    /**
     * Front
     */
    Front = "Front",
    /**
     * Back
     */
    Back = "Back"
}

/**
 * The align type.
 */
declare const enum AlignType {
    /**
     * Center alignment.
     */
    Center = "Center",
    /**
     * Left alignment.
     */
    Left = "Left",
    /**
     * Top alignment.
     */
    Top = "Top",
    /**
     * Top-Left alignment.
     */
    TopLeft = "TopLeft",
    /**
     * Top-Right alignment.
     */
    TopRight = "TopRight",
    /**
     * Right alignment.
     */
    Right = "Right",
    /**
     * Bottom alignment.
     */
    Bottom = "Bottom",
    /**
     * Bottom-Left alignment.
     */
    BottomLeft = "BottomLeft",
    /**
     * Bottom-Right alignment.
     */
    BottomRight = "BottomRight"
}

/**
 * The side type.
 */
declare const enum SideType {
    /**
     * Draw front side only
     */
    Front = "Front",
    /**
     * Draw back side only
     */
    Back = "Back",
    /**
     * Draw front and back sides
     */
    Double = "Double"
}

/**
 * The render type.
 */
declare const enum RenderType {
    /**
     * Sprite
     */
    Sprite = "Sprite",
    /**
     * Plane
     */
    Plane = "Plane"
}

/**
 * The pivot mode type.
 */
declare const enum PivotModeType {
    /**
     * Auto
     */
    Auto = "Auto",
    /**
     * Location
     */
    Location = "Location"
}

/**
 * The pick type.
 */
declare const enum PickType {
    /**
     * Raycaster
     */
    Raycaster = "Raycaster",
    /**
     * GPU
     */
    GPU = "GPU"
}

/**
 * The pick mode.
 */
declare const enum PickMode {
    /**
     * Mesh
     */
    Mesh = "Mesh",
    /**
     * BoundingBox
     */
    BoundingBox = "BoundingBox"
}

/**
 * The play state type.
 */
declare const enum PlayStateType {
    /**
     * It's ready.
     */
    Ready = "Ready",
    /**
     * It's playing.
     */
    Playing = "Playing",
    /**
     * It had paused.
     */
    Paused = "Paused",
    /**
     * It had stopped.
     */
    Stopped = "Stopped",
    /**
     * It had finished.
     */
    Finished = "Finished"
}

/**
 * The animation direction type.
 */
declare const enum AnimationDirectionType {
    /**
     * Play in normal mode.
     */
    Normal = "Normal",
    /**
     * Play in reverse mode.
     */
    Reverse = "Reverse"
}

/**
 * The inheritance type.
 */
declare const enum InheritType {
    /**
     * The object would process action normally(process it then pass to children).
     */
    Normal = "Normal",
    /**
     * The object would process action but do not pass to children
     */
    Break = "Break",
    /**
     * The object would skip action but keep passing to children.
     */
    Jump = "Jump",
    /**
     * The object would break action and do not pass to children
     */
    Stop = "Stop"
}

/**
 * The box helper mode type.
 */
declare const enum BoxHelperModeType {
    /**
     * All
     */
    All = "All",
    /**
     * Root
     */
    Root = "Root",
    /**
     * Bodies
     */
    Bodies = "Bodies"
}

/**
 * The blending type.
 */
declare const enum BlendingType {
    /**
     * Disable blending.
     */
    No = "NoBlending",
    /**
     * Normal blending.
    color(RGB) = (sourceColor * 1) + (destinationColor * (1 - srcAlpha))
    color(A) = (sourceAlpha * 1) + (destinationAlpha * (1 - srcAlpha))
     */
    Normal = "NormalBlending",
    /**
     * Additive blending.
    color(RGBA) = (sourceColor * 1) + (destinationColor * 1).
     */
    Additive = "AdditiveBlending",
    /**
     * Subtractive blending.
    color(RGB) = destinationColor * (1 - srcAlpha)
    color(A) = destinationAlpha * 1
     */
    Subtractive = "SubtractiveBlending",
    /**
     * Multiply blending.
    color(RGB) = destinationColor * sourceColor
    color(A) = destinationAlpha * sourceAlpha
     */
    Multiply = "MultiplyBlending"
}

/**
 * The UV mode type.
 */
declare const enum UVModeType {
    /**
     * Fill UV as tile(s) repeatly.
     */
    Tile = "Tile",
    /**
     * Fill UV as stretch image mode.
     */
    Stretch = "Stretch"
}

/**
 * The image slot type.
 */
declare const enum ImageSlotType {
    /**
     * Map
     */
    Map = "Map",
    /**
     * EnvMap
     */
    EnvMap = "EnvMap",
    /**
     * AlphaMap
     */
    AlphaMap = "AlphaMap",
    /**
     * EmissiveMap
     */
    EmissiveMap = "EmissiveMap",
    /**
     * NormalMap
     */
    NormalMap = "NormalMap",
    /**
     * ColorMapping
     */
    ColorMapping = "ColorMapping",
    /**
     * AOMap(An Ambient Occlusion Map)
     */
    AOMap = "AOMap"
}

/**
 * The image color format type.
 */
declare const enum ImageColorFormat {
    /**
     * Red, Green, Blue(RGB) color format.
     */
    RGB = "RGB",
    /**
     * Alpha, Red, Green, Blue(RGBA) color format.
     */
    RGBA = "RGBA",
    BC7_M6_OPAQUE_ONLY = "BC7_M6_OPAQUE_ONLY"
}

/**
 * The image wrap type.
 */
declare const enum ImageWrapType {
    /**
     * Image fill in repeat mode.
     */
    Repeat = "Repeat",
    /**
     * Image use edge to repeat.
     */
    ClampToEdge = "ClampToEdge",
    /**
     * Image fill in repeat/mirror one by one mode.
     */
    MirroredRepeat = "MirroredRepeat"
}

/**
 * The image mapping type.
 */
declare const enum ImageMappingType {
    /**
     * Image texture map normally.
     */
    UV = "UV",
    /**
     * CubeReflection
     */
    CubeReflection = "CubeReflection",
    /**
     * CubeRefraction
     */
    CubeRefraction = "CubeRefraction",
    /**
     * Use the single one env map to show image, like sky box etc.
     */
    EquirectangularReflection = "EquirectangularReflection",
    /**
     * EquirectangularRefraction
     */
    EquirectangularRefraction = "EquirectangularRefraction"
}

/**
 * The image filter type.
 */
declare const enum ImageFilterType {
    /**
     * Use the value of the texture element that is nearest to the specified texture coordinates.
     */
    NearestFilter = "NearestFilter",
    /**
     * Chooses the mipmap that most closely matches the size of the pixel being textured and uses the NearestFilter.
     */
    NearestMipmapNearestFilter = "NearestMipmapNearestFilter",
    /**
     * Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the NearestFilter.
     */
    NearestMipmapLinearFilter = "NearestMipmapLinearFilter",
    /**
     * Use the weighted average of the four texture elements that are closest to the specified texture coordinates.
     */
    LinearFilter = "LinearFilter",
    /**
     * Chooses the mipmap that most closely matches the size of the pixel being textured and uses the LinearFilter.
     */
    LinearMipmapNearestFilter = "LinearMipmapNearestFilter",
    /**
     * Chooses the two mipmaps that most closely matches the size of the pixel being textured and uses the LinearFilter.
     */
    LinearMipmapLinearFilter = "LinearMipmapLinearFilter"
}

/**
 * The shadow quality type.
 */
declare const enum ShadowQualityType {
    /**
     * 512x512 shadow texture size.
     */
    Low = 512,
    /**
     * 1024x1024 shadow texture size.
     */
    Medium = 1024,
    /**
     * 2048x2048 shadow texture size.
     */
    High = 2048,
    /**
     * 4096x4096 shadow texture size.
     */
    Ultra = 4096
}

/**
 * The action queue type.
 */
declare const enum ActionQueueType {
    /**
     * The actions of entering object level.
     */
    EnterLevel = "EnterLevel"
}

/**
 * The collider type.
 */
declare const enum ColliderType {
    /**
     * Use bounding box to check collider.
     */
    Box = "Box",
    /**
     * Use bounding sphere to check collider.
     */
    Sphere = "Sphere"
}

/**
 * The font weight.
 */
declare const enum FontWeight {
    /**
     * Normal.
     */
    Normal = "Normal",
    /**
     * Bold.
     */
    Bold = "Bold",
    /**
     * Bolder.
     */
    Bolder = "Bolder",
    /**
     * Lighter.
     */
    Lighter = "Lighter"
}

/**
 * The relationship direction type.
 */
declare const enum RelationshipDirection {
    /**
     * Out source -> target
     */
    Out = "Out",
    /**
     * In target -> source
     */
    In = "In",
    /**
     * InOut
     */
    InOut = "InOut",
    /**
     * NONE
     */
    None = "None"
}

/**
 * The filter result type.
 */
declare const enum FilterResultType {
    Pass = "Pass",
    Fail = "Fail",
    Ignore = "Ignore"
}

/**
 * The app options.
 * @property domElement? - The dom element to render scene.
 * @property [isEditor = false] - True indicates it's running in editor env.
 * @property background? - The background color.
 * @property envMap? - The environment map resource url.
 */
declare type AppOptions = {
    domElement?: HTMLElement;
    isEditor?: boolean;
    background?: number | string | Number[];
    envMap?: string;
};

/**
 * When focus change.
 * @param ev - The event info.
 */
declare type onFocusChangeCallback = (ev: FocusEvent) => void;

/**
 * The base event.
 * @property type - The case-insensitive name identifying the type of the event.
 * @property object - The object that triggered the event.
 * @property target - A reference to the object to which the event was originally dispatched.
 */
declare type BaseEvent = {
    type: string;
    object: THING.BaseObject;
    target: THING.BaseObject;
};

/**
 * The MouseEvent interface represents events that occur due to the user interacting with a pointing device (such as a mouse).
 * @property x - The X coordinate of the mouse pointer in local (screen) coordinates.
 * @property y - The Y coordinate of the mouse pointer in local (screen) coordinates.
 * @property button - The button number that was pressed when the mouse event was fired.
 * @property buttonType - The button type that was pressed when the mouse event was fired.
 * @property ctrlKey - Returns true if the ctrl key was down when the mouse event was fired.
 * @property shiftKey - Returns true if the shift key was down when the mouse event was fired.
 * @property altKey - Returns true if the alt key was down when the mouse event was fired.
 */
declare type MouseEvent = BaseEvent;

/**
 * The KeyboardEvent objects describe a user interaction with the keyboard.
 * @property keyCode - Returns a number representing the key value of the key represented by the event.
 * @property code - Returns a string representing the key value of the key represented by the event.
 * @property ctrlKey - Returns a boolean value that is true if the Ctrl key was active when the key event was generated.
 * @property shiftKey - Returns a boolean value that is true if the Shift key was active when the key event was generated.
 * @property altKey - Returns a boolean value that is true if the Alt key was active when the key event was generated.
 */
declare type KeyboardEvent = BaseEvent;

/**
 * The Event interface represents an event trigger.
 * @param ev - The case-insensitive name identifying the type of the event.
 */
declare type EventCallback = (ev: MouseEvent | KeyboardEvent) => any;

/**
 * @property rootPath - The root path.
 * @property includeSelf - True indicates export self info, default is false.
 * @property externalComponents - Check whether export external components, default is true.
 * @property lights - Check whether export lights, default is false.
 * @property camera - Check whether export camera, default is false.
 */
declare type SceneObjectExporterOptions = {
    rootPath: string;
    includeSelf: boolean;
    externalComponents: boolean;
    lights: boolean;
    camera: boolean;
};

declare namespace THING {
    /**
     * BaseAction
    The base action.
     */
    class BaseAction {
        /**
         * When run action.
         * @example
         * class MyAction extends THING.BaseAction {
            onRun(param) {
                console.log('Run my action');
            }
        }
         * @param param - The parameters.
         */
        onRun(param: BaseActionData): void;
    }
    /**
     * CameraFlyToAction
    The camera flyTo action.
     */
    class CameraFlyToAction {
    }
    /**
     * CreateObjectAction
    The create object action.
     */
    class CreateObjectAction {
    }
    /**
     * ObjectSetColorAction
    The object set color action.
     */
    class ObjectSetColorAction {
    }
    /**
     * The mesh builder.
     */
    class MeshBuilder {
        /**
         * Create circle.
         * @property options.radius - The radius.
         * @property options.segments - The number of disc segments.
         * @property options.startRad - The starting angle.
         * @param options - The options.
         */
        static createCircle(options: any): MeshResult;
        /**
         * Create cylinder.
         * @property options.radiusTop - The top radius.
         * @property options.radiusBottom - The bottom radius.
         * @property options.height - The height.
         * @property options.radialSegments - The number of divisions.
         * @property options.heightSegments - The number of height divisions.
         * @property options.openEnded - The calculate the top and bottom surfaces.
         * @property options.thetaStart - The starting angle.
         * @property options.thetaLength - The end angle.
         * @property options.poslength - The offset.
         * @param options - The options.
         */
        static createCylinder(options: any): MeshResult;
        /**
         * Create torus.
         * @property options.radius - The inner radius of ring.
         * @property options.tube - The width.
         * @property options.radialSegments - The number of tangent circle segments.
         * @property options.tubularSegments - The number of ring segments.
         * @property options.arc - The display range.
         * @param options - The options.
         */
        static createTorus(options: any): MeshResult;
        /**
         * Create capsule.
         * @property options.radius - The semicircle radius.
         * @property options.cylinderHeight - The column height.
         * @property options.widthSegments - The widthSegments.
         * @property options.heightSegments - The heightSegments.
         * @param options - The options.
         */
        static createCapsule(options: any): MeshResult;
    }
    /**
     * The action queue what can process multiple actions.
     * @example
     * let actionQueue = new THING.ActionQueue({ name: 'MyActionQueue' });
     * @param param - The initial parameters.
     */
    class ActionQueue {
        constructor(param: any);
        /**
         * Clear all groups and result.
         * @example
         * actionQueue.clear();
         */
        clear(): void;
        /**
         * Add action.
         * @example
         * // Create action processor
        class ActionProcessor {
            onStop() {
            }
        
            onRun(options) {
            }
        };
        
        actionQueue.add(new ActionProcessor(), 'FirstActionProcessor', 1000);
         * @param processor - The action processor(s).
         * @param name - The action name(only works for single processor mode).
         * @param priority - The action priority value(default is 0, higher value indicates higher priority).
         */
        add(processor: ActionProcessor[] | ActionProcessor, name: string, priority: number): void;
        /**
         * Get action by name.
         * @example
         * let actionProcessor = actionQueue.getByName('FirstActionProcessor');
         * @param name - The action name.
         */
        getByName(name: string): ActionProcessor;
        /**
         * Get action by type.
         * @example
         * // ActionProcess is class type(class ActionProcessor)
        let actionProcessor = actionQueue.getByType(ActionProcessor);
         * @param type - The action type.
         */
        getByType(type: any): ActionProcessor;
        /**
         * Remove action by name.
         * @example
         * actionQueue.removeByName('FirstActionProcessor');
         * @param name - The action name.
         */
        removeByName(name: string): void;
        /**
         * Remove action by type.
         * @example
         * // ActionProcess is class type(class ActionProcessor)
        actionQueue.removeByType(ActionProcessor);
         * @param type - The action type.
         */
        removeByType(type: any): void;
        /**
         * Traverse by name.
         * @example
         * actionQueue.traverseByName('PlayAction', (actionProcessor) => {
            console.log(actionProcessor);
        });
         * @param name - The action name.
         * @param callback - The callback function.
         */
        traverseByName(name: string, callback: OnTraverseActionProcessorCallback): void;
        /**
         * Traverse by type.
         * @example
         * // ActionProcess is class type(class ActionProcessor)
        actionQueue.traverseByType(ActionProcess, (actionProcessor) => {
            console.log(actionProcessor);
        });
         * @param type - The action type.
         * @param callback - The callback function.
         */
        traverseByType(type: any, callback: OnTraverseActionProcessorCallback): void;
        /**
         * Get/Set name.
         * @example
         * // Print action queue's name
        console.log(actionQueue.name);
         */
        name: string;
        /**
         * Get actions.
         * @example
         * // Print action queue's (actions/processors)
        console.log(actionQueue.actions);
         */
        actions: ActionProcessor[];
    }
    /**
     * Control render's FPS(frame pre second), we can limited max FPS also.
     */
    class FPSTimer {
        /**
         * Get the elapsed time(seconds) since started.
         * @example
         * // Print elapsed time(seconds) since started.
        console.log(fpsTimer.elapsedTime);
         */
        elapsedTime: number;
        /**
         * Get the delta time(seconds) from previous frame.
         * @example
         * // Print delta time(seconds) from previous frame.
        console.log(fpsTimer.deltaTime);
         */
        deltaTime: number;
        /**
         * Get the current total frame count since started.
         * @example
         * // Print current frame count since started.
        console.log(fpsTimer.currentFrameCount);
         */
        currentFrameCount: number;
        /**
         * Get/Set fixed delta time in seconds.
         */
        fixedDeltaTime: number;
        /**
         * Get/Set the max FPS number, null indicates unlimited.
         * @example
         * // Limited the max FPS to 30 fps
        fpsTimer.maxFPS = 30;
        // Unlimited the FPS
        fpsTimer.maxFPS = null;
         */
        maxFPS: number;
        /**
         * Enable/Disable fps counter.
         * @example
         * // Disable the FPS counter, if we disable then we can not get the FPS Counter info
        fpsTimer.enableFpsCounter = false;
         */
        enableFpsCounter: boolean;
        /**
         * Get the FPS Counter.
         * @example
         * // Print the current FPS counter
        console.log(fpsTimer.fpsCounter);
         */
        fpsCounter: number;
    }
    /**
     * ObjectExpression
    The object expression.
     */
    class ObjectExpression {
    }
    /**
     * Utils
    Useful functions.
     */
    class Utils {
        /**
         * Load code.
         * @example
         * THING.Utils.loadCode('console.log("Code load finished")');
         * @param code - The code string.
         * @param options - The options.
         * @param options.es6Mode - True indicates load code in es6 mode.
         * @param options.sourceURL - The source URL in sync mode.
         * @param options.onLoad - The load finished callback function.
         * @param options.onError - The error occurred callback function.
         */
        static loadCode(code: string, options: {
            es6Mode: boolean;
            sourceURL: string;
            onLoad: (...params: any[]) => any;
            onError: (...params: any[]) => any;
        }): void;
        /**
         * Load code in async mode.
         * @example
         * await THING.Utils.loadCodeAsync('console.log("Code load finished")');
         * @param code - The code string.
         * @param options - The options.
         * @param options.es6Mode - True indicates load code in es6 mode.
         * @param options.sourceURL - The source URL in sync mode.
         */
        static loadCodeAsync(code: string, options: {
            es6Mode: boolean;
            sourceURL: string;
        }): Promise<any>;
        /**
         * Load file(s).
         * @example
         * // Load 'my-lib.js' file by load and error callback functions
        THING.Utils.loadFile('my-lib.js', {
            onLoad: function() {
                console.log('Load finished');
            },
            onError: function() {
                console.error('Load failed');
            }
        });
         * @param resource - The file(s) resource url.
         * @param options - The options.
         * @param options.onLoad - The load finished callback function.
         * @param options.onError - The error occurred callback function.
         * @param [options.cache = true] - True indicates try to use cache.
         * @param [options.inOrder = true] - True indicates keep order to load files one by one.
         */
        static loadFile(resource: string | String[], options: {
            onLoad: (...params: any[]) => any;
            onError: (...params: any[]) => any;
            cache?: boolean;
            inOrder?: boolean;
        }): void;
        /**
         * Load file(s) in async mode.
         * @example
         * // Load 'my-lib.js' file and wait to load completed
        await THING.Utils.loadFileAsync('my-lib.js');
         * @param resource - The file(s) resource url.
         * @param options - The options.
         * @param [options.cache = true] - True indicates try to use cache.
         * @param [options.inOrder = true] - True indicates keep order to load files one by one.
         */
        static loadFileAsync(resource: string | String[], options: {
            cache?: boolean;
            inOrder?: boolean;
        }): Promise<any>;
        /**
         * Check whether it's compressed texture.
         * @example
         * if (THING.Utils.isCompressedTexture('image.dds')) {
            console.log("It's compressed texture");
        }
         * @param url - The compressed texture url.
         */
        static isCompressedTexture(url: string): boolean;
        /**
         * Load image file.
         * @example
         * // Load image resource by load callback function.
        THING.Utils.loadImageFile('./assets/images/blue.png',
            function(image) {
                console.log(image);
            }
        );
         * @param url - The file URL.
         * @param onLoad - When load finished callback function.
         * @param onProgress - When loading in progression callback function.
         * @param onError - When laod error occurred callback function.
         */
        static loadImageFile(url: string, onLoad: (...params: any[]) => any, onProgress: (...params: any[]) => any, onError: (...params: any[]) => any): void;
        /**
         * Load image file in async mode.
         * @example
         * // Load image resource and wait to load finished.
        await THING.Utils.loadImageFileAsync('image.png');
         * @param url - The file URL.
         */
        static loadImageFileAsync(url: string): Promise<any>;
        /**
         * Load binary file.
         * @example
         * // Load 'my-file.bin' file in binary format.
        THING.Utils.loadBinaryFile('my-file.bin',
            function(data) {
                console.log('Load finished', data);
            },
            function() {
                console.error('Load failed');
            }
        );
         * @param url - The file URL.
         * @param onLoad - When load finished callback function.
         * @param onProgress - When loading in progression callback function.
         * @param onError - When laod error occurred callback function.
         * @param options - The options.
         */
        static loadBinaryFile(url: string, onLoad: (...params: any[]) => any, onProgress: (...params: any[]) => any, onError: (...params: any[]) => any, options: LoadFileOptions): void;
        /**
         * Load binary file in async mode.
         * @example
         * // Load 'my-file.bin' file and wait to load finished.
        await THING.Utils.loadBinaryFileAsync('my-file.bin');
         * @param url - The file URL.
         * @param options - The options.
         */
        static loadBinaryFileAsync(url: string, options: LoadFileOptions): Promise<any>;
        /**
         * Save data as file.
         * @example
         * let data = JSON.stringify('{ name: "Nice to meet you"}');
        THING.Utils.saveAsFile('test.json', data);
         * @param fileName - The file name.
         * @param data - The file data.
         */
        static saveAsFile(fileName: string, data: string | Blob | Image): boolean;
        /**
         * Save data as image.
         * @example
         * // Save 32x32 image with random pixel color
        const width = 32, height = 32;
        let pixelBuffer = [];
        for(let y = 0; y < height; y++) {
            for(let x = 0; x < width * 4; x++) {
                pixelBuffer[y * width * 4 + x] = THING.Math.randomInt(0, 255);
            }
        }
        THING.Utils.saveAsImage(width, height, new Uint8Array(pixelBuffer));
         * @param width - The image width in pixel.
         * @param height - The image height in pixel.
         * @param pixelBuffer - The image pixel buffer.
         */
        static saveAsImage(width: number, height: number, pixelBuffer: Uint8Array): any;
        /**
         * Load text file.
         * @example
         * // Load 'my-file.txt' file in text format.
        THING.Utils.loadTextFile('my-file.txt',
            function(data) {
                console.log('Load finished', data);
            },
            function() {
                console.error('Load failed');
            }
        );
         * @param url - The file URL.
         * @param onLoad - When load finished callback function.
         * @param onProgress - When loading in progression callback function.
         * @param onError - When laod error occurred callback function.
         * @param options - The options.
         */
        static loadTextFile(url: string, onLoad: (...params: any[]) => any, onProgress: (...params: any[]) => any, onError: (...params: any[]) => any, options: LoadFileOptions): void;
        /**
         * Load text file in async mode.
         * @example
         * // Load 'my-file.txt' file and wait to load finished.
        await THING.Utils.loadTextFileAsync('my-file.txt');
         * @param url - The file URL.
         * @param options - The options.
         */
        static loadTextFileAsync(url: string, options: LoadFileOptions): Promise<any>;
        /**
         * Load JSON file.
         * @example
         * // Load 'my-file.json' file in json format.
        THING.Utils.loadJSONFile('my-file.json',
            function(data) {
                console.log('Load finished', data);
            },
            function() {
                console.error('Load failed');
            }
        );
         * @param url - The file URL.
         * @param onLoad - When load finished callback function.
         * @param onProgress - When loading in progression callback function.
         * @param onError - When laod error occurred callback function.
         * @param options - The options.
         */
        static loadJSONFile(url: string, onLoad: (...params: any[]) => any, onProgress: (...params: any[]) => any, onError: (...params: any[]) => any, options: LoadFileOptions): void;
        /**
         * Load JSON file(s) in async mode.
         * @example
         * // Load 'my-file.json' file and wait to load finished.
        await THING.Utils.loadJSONFileAsync('my-file.json');
         * @param url - The file URL(s).
         * @param options - The options.
         */
        static loadJSONFileAsync(url: string | String[], options: LoadFileOptions): Promise<any>;
        /**
         * Login.
         * @example
         * let promise = THING.Utils.login({
                method: 'GET',
                url: 'http://127.0.0.1:3000/auth.json',
                wasmRootPath: 'js/wasm',
                postFields: 'post data'
            });
         * @param options - The options.
         */
        static login(options: loginOptions): Promise<any>;
        /**
         * unique the object array. process the repeat and inherit object
         * @example
         * THING.Utils.uniqueObjects(objArr);
         * @param objects - object array.
         */
        static uniqueObjects(objects: object[]): void;
    }
    /**
     * The component of action queue by groups.
     */
    class ActionGroupComponent extends THING.BaseComponent {
        /**
         * Add group.
         * @param name - The group name.
         */
        add(name: string): THING.ActionQueue;
        /**
         * Remove group.
         * @param name - The group name.
         */
        remove(name: string): void;
        /**
         * Get group.
         * @param name - The group name.
         */
        get(name: string): any;
        /**
         * Stop group.
         * @param name - The group name.
         * @param options - The options.
         */
        stop(name: string, options: any): void;
        /**
         * Run group.
         * @param name - The group name.
         * @param options - The options.
         */
        run(name: string, options: any): Promise<any>;
        /**
         * Get the groups.
         */
        groups: any;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The application helper to show many useful information.
     */
    class AppHelperComponent extends THING.BaseComponent {
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The resource manager to use duplicate resources, prevent to create multiple times.
     */
    class AppResourcePoolComponent extends THING.BaseComponent {
        /**
         * Load image texture from URL.
         * @example
         * let image = THING.App.current.loadImageTexture('./flower.png');
            await image.waitForComplete();
            console.log(image);
         * @param url - The resource url.
         * @param sampler - The sampler info.
         */
        loadImageTexture(url: string, sampler: LoadTextureResourceSamplerInfo): THING.ImageTexture;
        /**
         * Load image texture from URL in async mode.
         * @example
         * let image = await THING.App.current.loadImageTextureAsync('./flower.png');
            console.log(image);
         * @param url - The resource url.
         * @param sampler - The sampler info.
         */
        loadImageTextureAsync(url: string, sampler: LoadTextureResourceSamplerInfo): Promise<any>;
        /**
         * Load scene resource.
         * @example
         * app.loadScene('myScene.json', () => {
                console.log('load finished');
            });
         * @param url - The resource url.
         * @param onLoad - The load callback function.
         * @param onProgress - The progress callback function.
         * @param onError - The error callback function.
         * @param options - The options.
         */
        loadScene(url: string, onLoad: (...params: any[]) => any, onProgress: (...params: any[]) => any, onError: (...params: any[]) => any, options: any): void;
        /**
         * Load gltf or bundle resource.
         * @example
         * app.load('myScene.json', () => {
                console.log('load finished');
            });
         * @param options - The options.
         * @param options.url - The resource url.
         * @param options.onLoad - The load callback function.
         * @param options.onProgress - The progress callback function.
         * @param options.onError - The error callback function.
         */
        load(options: {
            url: string;
            onLoad: (...params: any[]) => any;
            onProgress: (...params: any[]) => any;
            onError: (...params: any[]) => any;
        }): void;
        /**
         * Load scene resource in async mode.
         * @example
         * await app.loadSceneAsync('myScene.json');
         * @param url - The resource url.
         * @param options - The options.
         */
        loadSceneAsync(url: string, options: any): Promise<any>;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The timer controller for application.
     */
    class AppTimerComponent extends THING.BaseComponent {
        /**
         * Get the elapsed time(seconds) when started.
         * @example
         * let elapsedTime = THING.App.current.elapsedTime;
            console.log(elapsedTime);
         */
        elapsedTime: number;
        /**
         * Get the delta time(seconds) of previous frame.
         * @example
         * let deltaTime = THING.App.current.deltaTime;
            console.log(deltaTime);
         */
        deltaTime: number;
        /**
         * Get the current total frame count after started.
         * @example
         * let currentFrameCount = THING.App.current.currentFrameCount;
            console.log(currentFrameCount);
         */
        currentFrameCount: number;
        /**
         * Get/Set the max FPS number, null indicates unlimited.
         * @example
         * // Limit max render FPS to 1
            THING.App.current.maxFPS = 1;
            // Unlimit max render FPS
            THING.App.current.maxFPS = null;
         */
        maxFPS: number;
        /**
         * Get the FPS Counter.
         * @example
         * let fpsCounter = THING.App.current.fpsCounter;
            console.log(fpsCounter);
         */
        fpsCounter: number;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The base component of all components, each component should inherit from it.
     */
    class BaseComponent {
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The base component group to manage components, you should inherit from it when you want to manage multiple components.
     */
    class BaseComponentGroup {
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base line segments helper to show points, you can inherit from it when you need to show drawing points.
     */
    class BaseLineSegmentsHelperComponent extends THING.HelperComponent {
        /**
         * Show/Hide lines.
         */
        visible: boolean;
        /**
         * Get points of line(s).
         */
        points: Number[][];
        /**
         * Get colors of line(s).
         */
        colors: Number[][];
        /**
         * Get bounding box.
         */
        boundingBox: BoxHelperResult;
        /**
         * Get oriented box.
         */
        orientedBox: BoxHelperResult;
        /**
         * Show/Hide axes helper.
         */
        axes: boolean;
        /**
         * Get/Set axes helper length.
         */
        axesLength: number;
        /**
         * Get the light(s)'s config.
         */
        lights: object[];
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * To load blueprint resource(s) and run them.
     */
    class BlueprintComponent extends THING.BaseComponent {
        /**
         * Load from URL or data.
         * @example
         * object.blueprint.load({ url: './blueprints/myBP.json' });
        object.blueprint.run();
         * @param options - The options.
         */
        load(options: BlueprintComponentLoadArgs): THING.BlueprintComponent;
        /**
         * Run all blueprints.
         */
        run(): void;
        /**
         * Stop all blueprints.
         */
        stop(): void;
        /**
         * Set variable by name.
         * @param name - The variable name.
         * @param value - The variable value.
         */
        setVar(name: string, value: any): void;
        /**
         * Set variables.
         * @param value - The variables.
         */
        setVars(value: any): void;
        /**
         * Register event.
         * @param type - The event type.
         * @param callback - The callback function.
         */
        addEventListener(type: string, callback: (...params: any[]) => any): void;
        /**
         * Unregister event.
         * @param type - The event type.
         * @param callback - The callback function.
         */
        removeEventListener(type: string, callback: (...params: any[]) => any): void;
        /**
         * Trigger event.
         * @param type - The event type.
         * @param event - The event info.
         */
        triggerEvent(type: string, event: any): void;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The bounding box(AABB, OBB) of object.
     */
    class BoundingComponent extends THING.BaseComponent {
        /**
         * Get/Set the bounding box inherit type.
         */
        inheritType: InheritType;
        /**
         * Get/Set the bounding box inherit type.
         */
        inheritActionType: InheritType;
        /**
         * Get/Set the size of the picked bounding box (set null to clear).
         */
        pickedSize: Number[];
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The bounding of camera, it can work with light shadow effect system.
     */
    class CameraBoundingComponent extends THING.BoundingComponent {
        /**
         * Get/Set the bounding box inherit type.
         */
        inheritType: InheritType;
        /**
         * Get/Set the bounding box inherit type.
         */
        inheritActionType: InheritType;
        /**
         * Get/Set the size of the picked bounding box (set null to clear).
         */
        pickedSize: Number[];
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The camera controller.
     */
    class CameraControlComponent extends THING.BaseComponent {
        /**
         * Pan in screen by pixel.
         * @example
         * // Move camera with bottom direction
            app.camera.pan(0, -50);
         * @param deltaX - The delta X in pixel.
         * @param deltaY - The delta Y in pixel.
         * @param [duration = 500] - The time in milliseconds.
         */
        pan(deltaX: number, deltaY: number, duration?: number): void;
        /**
         * Move forward/backward.
         * @param distance - The distance (+: forward, -: backward).
         * @param param - The options.
         * @param [param.duration = 500] - The time in milliseconds.
         * @param [param.updateTarget = true] - True indicates update target's position.
         */
        zoom(distance: number, param: {
            duration?: number;
            updateTarget?: boolean;
        }): void;
        /**
         * Stop current control.
         */
        stop(): void;
        /**
         * Check whether is changing or not.
         */
        isChanging: boolean;
        /**
         * Enable/Disable control.
         */
        enable: boolean;
        /**
         * Enable/Disable auto move target forward.
         */
        enableAutoMoveTargetForward: boolean;
        /**
         * Enable/Disable adjust target position.
         */
        enableAdjustTargetPosition: boolean;
        /**
         * Enable/Disable adjust near.
         */
        enableAdjustNear: boolean;
        /**
         * Enable/Disable adjust pan speed.
         */
        enableAdjustPanSpeed: boolean;
        /**
         * Enable/Disable zoom to mouse cursor on wheel.
         */
        enableZoomToMouseCursorOnWheel: boolean;
        /**
         * Enable/Disable pick when changing.
         */
        enablePickWhenChanging: boolean;
        /**
         * Enable/Disable damping.
         */
        enableDamping: boolean;
        /**
         * Enable/Disable rotate.
         */
        enableRotate: boolean;
        /**
         * Enable/Disable pan.
         */
        enablePan: boolean;
        /**
         * Enable/Disable zoom.
         */
        enableZoom: boolean;
        /**
         * Enable/Disable map control.
         */
        enableMapControl: boolean;
        /**
         * Get/Set damping factor.
         */
        dampingFactor: number;
        /**
         * Get/Set zoom speed.
         */
        zoomSpeed: number;
        /**
         * Get/Set rotate speed.
         */
        rotateSpeed: number;
        /**
         * Get/Set pan speed.
         */
        panSpeed: number;
        /**
         * Get/Set key pan speed.
         */
        keyPanSpeed: number;
        /**
         * Get/Set the factor of zoom to mouse cursor on wheel.
         */
        zoomToMouseCursorOnWheelSpeed: number;
        /**
         * Set/Get distance limited range[min, max], null indicates it's unlimited.
         */
        distanceLimited: Number[];
        /**
         * Set/Get vert angle limited range[min, max], default is [0, 180].
         */
        vertAngleLimit: Number[];
        /**
         * Set/Get horz angle limited range[min, max], default is [0, 180].
         */
        horzAngleLimit: Number[];
        /**
         * Get/Set boundary to limit target position(null indicates clear it).
         */
        boundary: BoundaryResult;
        /**
         * Get/Set up direction.
         */
        upDirection: Number[];
        /**
         * Get/Set target of the world space.
         */
        target: Number[];
        /**
         * Get the distance from position to target.
         */
        distance: number;
        /**
         * Get/Set space panning of the screen.
        True indicates pan action will base on screen, otherwise indicates will base on camera's Y axis direction.
        Default value is true.
         * @example
         * app.camera.screenSpacePanning = false;
         */
        screenSpacePanning: boolean;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The controller to manage event dispatch.
     */
    class CameraControlEventDispatcherComponent extends THING.BaseComponent {
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The rendering effect by camera, some object post effect(s) can be changed here.
     */
    class CameraEffectComponent extends THING.BaseComponent {
        /**
         * Enable/Disable.
         */
        enable: boolean;
        /**
         * Get the glow.
         */
        glow: CameraGlowEffect;
        /**
         * Get the inner glow.
         */
        innerGlow: CameraInnerGlowEffect;
        /**
         * Get the tailing.
         */
        tailing: CameraTailingEffect;
        /**
         * Get the radial.
         */
        radial: CameraRadialEffect;
        /**
         * Get the ghosting.
         */
        ghosting: CameraGhostingEffect;
        /**
         * Get the lineBloom.
         */
        lineBloom: CameraLineBloomEffect;
        /**
         * Get/Set config.
         */
        config: any;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The fog effect by camera.
     */
    class CameraFogComponent extends THING.BaseComponent {
        /**
         * Enable/Disable fog.
         */
        enable: boolean;
        /**
         * Get/Set the near.
         */
        near: number;
        /**
         * Get/Set the far.
         */
        far: number;
        /**
         * Get/Set the density.
         */
        density: number;
        /**
         * Get/Set the color.
         */
        color: number | string | String[];
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The camera view helper, can show frustum of camera.
     */
    class CameraHelperComponent extends THING.BaseLineSegmentsHelperComponent {
        /**
         * Show/Hide picker to check object picking.
         * @param value - True indicates show it, otherwise hide it.
         */
        showPicker(value?: boolean): void;
        /**
         * Show/Hide target node.
         * @param value - True indicates show it, otherwise hide it.
         */
        showTarget(value?: boolean): void;
        /**
         * Show/Hide helper.
         */
        visible: boolean;
        /**
         * Get points of line(s).
         */
        points: Number[][];
        /**
         * Get colors of line(s).
         */
        colors: Number[][];
        /**
         * Get bounding box.
         */
        boundingBox: BoxHelperResult;
        /**
         * Get oriented box.
         */
        orientedBox: BoxHelperResult;
        /**
         * Show/Hide axes helper.
         */
        axes: boolean;
        /**
         * Get/Set axes helper length.
         */
        axesLength: number;
        /**
         * Get the light(s)'s config.
         */
        lights: object[];
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The interpolation control of camera, you can change position, target or up-axis direction of camera in that way.
     */
    class CameraLerpComponent extends THING.LerpComponent {
        /**
         * Start lerp.
         * @param param - The parameters.
         * @param name - The lerp name, if user want to stop it later then need to provide it.
         */
        to(param: LerpArgs, name: string): void;
        /**
         * Lerp to in duration (async).
         * @param param - The parameters.
         * @param name - The lerp name, if user want to stop it later then need to provide it.
         */
        toAsync(param: LerpArgs, name: string): Promise<any>;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The picker by camera, user can pick object(s) from it.
     */
    class CameraPickerComponent extends THING.BaseComponent {
        /**
         * Check intersection between object and region.
         * @param region - The [left, top, width, height] region in screen.
         * @param object - The object.
         */
        intersectObjectInRegion(region: Number[], object: THING.Object3D): boolean;
        /**
         * Pick node.
         * @param x - The x coordinate in screen.
         * @param y - The y coordinate in screen.
         * @param root? - The root object to pick.
         */
        pick(x: number, y: number, root?: THING.BaseObject): PickResult;
        /**
         * Pick from cross planes.
         * @param x - The x coordinate in screen.
         * @param y - The y coordinate in screen.
         */
        pickFromCrossPlanes(x: number, y: number): PickResult;
        /**
         * Calculate the points where the plane intersects.
         * @param x - The x coordinate in screen.
         * @param y - The y coordinate in screen.
         * @param normal - The plane normal. (default [0,1,0])
         * @param constant - Distance of plane. (default 0)
         */
        intersectPlane(x: number, y: number, normal: Number[], constant: number): Number[];
        /**
         * Get/Set pick type.
         */
        pickType: PickType;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The rendering effect by camera, some screen post effect(s) can be changed here.
     */
    class CameraPostEffectComponent extends THING.BaseComponent {
        /**
         * Enable/Disable effect.
         */
        enable: boolean;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The resource(s) controller of camera, like setting background resource etc.
     */
    class CameraResourceControllerComponent extends THING.BaseComponent {
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * To override some interfaces when transform changed of camera.
     */
    class CameraTransformComponent extends THING.TransformComponent {
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The collider of object(s) what can listen on collider events to process hit logic code.
     */
    class ColliderComponent extends THING.BaseComponent {
        /**
         * Add event listener.
         * @param type - The event type.
         * @param listener - The event callback function.
         */
        addEventListener(type: string, listener: (...params: any[]) => any): void;
        /**
         * Remove event listener.
         * @param type - The event type.
         * @param listener - The event callback function.
         */
        removeEventListener(type: string, listener: (...params: any[]) => any): void;
        /**
         * Enable/Disable.
         */
        enable: boolean;
        /**
         * Get/Set the mode.
         */
        mode: ColliderType;
        /**
         * Get/Set the radius.
         */
        radius: number;
        /**
         * Get/Set the offset.
         */
        offset: Number[];
        /**
         * Get/Set the half size.
         */
        halfSize: Number[];
        /**
         * Get/Set the visible.
         */
        visible: boolean;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The component that extends some useful interfaces.
    The interface work flow:
    1. onAwake -> onStart/onStartAsync
    2. onUpdate -> onLateUpdate
     * @example
     * class MyRotator extends THING.Component {
     onAwake(param) {
      this.speed = param['speed'];
     }
    
     onStart() {
      this.object.style.color = "0xFF0000";
     }
    
     onUpdate(deltaTime) {
      this.object.rotateY(this.speed * deltaTime);
     }
    }
    
    let box = new THING.Box();
    box.addComponent(MyRotator, 'rotator');
    box.rotator.speed = 100;
     */
    class Component extends THING.BaseComponent {
        /**
         * When start to active component(just only once) in async mode and wait for finish, it's after onAwake() interface.
         */
        onStartAsync: OnStartAsyncComponentCallback;
        /**
         * When update before render.
         */
        OnLateUpdate: OnLateUpdateComponentCallback;
        /**
         * When add component(just only once).
         * @param args - The constructor arguments.
         */
        onAwake(args: any): void;
        /**
         * When start to active component(just only once), it's after onAwake() interface.
         * @param args - The constructor arguments.
         */
        onStart(args: any): void;
        /**
         * When remove component.
         */
        onDestroy(): void;
        /**
         * When active it.
         */
        onEnable(): void;
        /**
         * When deactivate it.
         */
        onDisable(): void;
        /**
         * Get the starting promise.
         */
        startingPromise: Promise<any>;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * Show/Hide the directional light position and direction.
     */
    class DirectionalLightHelperComponent extends THING.BaseLineSegmentsHelperComponent {
        /**
         * Show/Hide lines.
         */
        visible: boolean;
        /**
         * Get points of line(s).
         */
        points: Number[][];
        /**
         * Get colors of line(s).
         */
        colors: Number[][];
        /**
         * Get bounding box.
         */
        boundingBox: BoxHelperResult;
        /**
         * Get oriented box.
         */
        orientedBox: BoxHelperResult;
        /**
         * Show/Hide axes helper.
         */
        axes: boolean;
        /**
         * Get/Set axes helper length.
         */
        axesLength: number;
        /**
         * Get the light(s)'s config.
         */
        lights: object[];
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * Load or unload object's resources when show or hide it automaticly.
     */
    class DynamicLoadComponent extends THING.BaseComponent {
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The helper component of object what can show many useful information of it, like axis, bounding box, etc.
     */
    class HelperComponent extends THING.BaseComponent {
        /**
         * Get bounding box.
         */
        boundingBox: BoxHelperResult;
        /**
         * Get oriented box.
         */
        orientedBox: BoxHelperResult;
        /**
         * Show/Hide axes helper.
         */
        axes: boolean;
        /**
         * Get/Set axes helper length.
         */
        axesLength: number;
        /**
         * Get the light(s)'s config.
         */
        lights: object[];
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The interpolation of object what could do all smoothing transforming jobs.
     */
    class LerpComponent extends THING.BaseComponent {
        /**
         * Start lerp.
         * @param param - The parameters.
         * @param name - The lerp name, if user want to stop it later then need to provide it.
         */
        to(param: LerpArgs, name: string): void;
        /**
         * Lerp to in duration (async).
         * @param param - The parameters.
         * @param name - The lerp name, if user want to stop it later then need to provide it.
         */
        toAsync(param: LerpArgs, name: string): Promise<any>;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The level actions of object, it could process object's action(s) when enter its level.
     */
    class LevelComponent extends THING.BaseComponent {
        /**
         * When leave level callback function.
         */
        onLeave: OnLeaveLevelCallback;
        /**
         * When leave level callback function in async mode.
         */
        onLeaveAsync: OnLeaveLevelAsyncCallback;
        /**
         * When enter level callback function.
         */
        onEnter: OnEnterLevelCallback;
        /**
         * When enter level callback function in async mode.
         */
        onEnterAsync: OnEnterLevelAsyncCallback;
        /**
         * When finish level callback function.
         */
        onFinish: OnFinishedEnterLevelCallback;
        /**
         * Get level action by name.
         * @param name - The action name.
         */
        getActionByName(name: string): ActionProcessor;
        /**
         * Get level action by type.
         * @param type - The action type.
         */
        getActionByType(type: any): ActionProcessor;
        /**
         * Enable/Disable action.
         * @param name - The action name or type.
         * @param value - The action enable state.
         */
        enableAction(name: string, value: boolean): void;
        /**
         * Check whether enable action or not.
         * @param name - The action name or type.
         */
        isActionEnabled(name: string): boolean;
        /**
         * Get level action queue.
         */
        actionQueue: THING.ActionQueue;
        /**
         * Get level actions.
         */
        actions: ActionProcessor[];
        /**
         * Get/Set level config. Note: This needs to be set before the level change.
         */
        config: LevelConfig;
        /**
         * Get/Set the position of the camera and target position (The data in the scene file is read).
         */
        viewpoint: Viewpoint;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * Auto update light attributes.
     */
    class LightAdapterComponent extends THING.BaseComponent {
        /**
         * Enable/Disable.
         */
        enable: boolean;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The model animation player of entity object.
     */
    class ModelAnimationComponent extends THING.BaseComponent {
        /**
         * Check whether has animation by name.
         * @example
         * if (object.hasAnimation('run')) {
                object.playAnimation('run');
            }
         * @param name - The animation name
         */
        hasAnimation(name: string): boolean;
        /**
         * Stop animation.
         * @param name - The animation name.
         */
        stopAnimation(name: string): void;
        /**
         * Stop all animations.
         */
        stopAllAnimations(): void;
        /**
         * Get all animations info.
         */
        animations: AnimationResult[];
        /**
         * Get the animation names.
         */
        animationNames: String[];
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The model of entity object.
     */
    class ModelResourceComponent extends THING.BaseComponent {
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The helper of base points object in plane.
     * @param param - The initial parameters.
     */
    class PlanePointsHelperComponent extends THING.BaseLineSegmentsHelperComponent {
        constructor(param: any);
        /**
         * Show/Hide helper.
         */
        visible: boolean;
        /**
         * Get points of line(s).
         */
        points: Number[][];
        /**
         * Get colors of line(s).
         */
        colors: Number[][];
        /**
         * Get bounding box.
         */
        boundingBox: BoxHelperResult;
        /**
         * Get oriented box.
         */
        orientedBox: BoxHelperResult;
        /**
         * Show/Hide axes helper.
         */
        axes: boolean;
        /**
         * Get/Set axes helper length.
         */
        axesLength: number;
        /**
         * Get the light(s)'s config.
         */
        lights: object[];
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The relationship of object.
     */
    class RelationshipComponent extends THING.BaseComponent {
        /**
         * Query related objects.
         * @example
         * let lightSwitch = new Box();
        let light = new Box();
        let rel = new THING.Relationship({
             type: 'control',
             source: lightSwitch,
             target: light
        })
        lightSwitch.relationship.query({type: 'control'});
         * @param options.type - The type of relationship.
         * @param options.name - The name of relationship.
         * @param options.queryDirection - The query direction.
         */
        query(options: {
            type: string;
            name: string;
            queryDirection: RelationshipDirection;
        }): THING.Selector;
        /**
         * Query related objects by relationship type.
         * @example
         * let lightSwitch = new Box();
        let light = new Box();
        let rel = new THING.Relationship({
             type: 'control',
             source: lightSwitch,
             target: light,
                name: 'light'
        })
        let objs = lightSwitch.relationship.queryByType('control');
         * @param type - The relationship type.
         * @param queryDirection - The query direction.
         */
        queryByType(type: string, queryDirection: RelationshipDirection): THING.Selector;
        /**
         * Query related objects by relationship name.
         * @example
         * let lightSwitch = new Box();
        let light = new Box();
        let rel = new THING.Relationship({
             type: 'control',
             source: lightSwitch,
             target: light,
                name: 'light'
        })
        let objs = lightSwitch.relationship.queryByName('light');
         * @param name - The relationship name.
         * @param queryDirection - The query direction.
         */
        queryByName(name: string, queryDirection: RelationshipDirection): THING.Selector;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The render control of object, like using instanced drawing mode.
     */
    class RenderComponent extends THING.BaseComponent {
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * Auto update light position, target and shadow range by binding object's bounding.
     */
    class ShadowLightAdapterComponent extends THING.LightAdapterComponent {
        /**
         * Bind/Unbind object.
         * @param object - The object.
         */
        bind(object: THING.BaseObject): void;
        /**
         * Get/Set the light sphere radius of light position from target, default is null(indicates auto calculate).
         */
        lightSphereRadius: number;
        /**
         * Get/Set the light sphere radius of shadow, default is null(indicates auto calculate).
         */
        lightSphereShadowRadius: number;
        /**
         * Get/Set horz angles from object's bounding box center.
         */
        horzAngle: number;
        /**
         * Get/Set vert angles from object's bounding box center.
         */
        vertAngle: number;
        /**
         * Enable/Disable.
         */
        enable: boolean;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The transform component of light what can cast shadow.
     */
    class ShadowLightTransformComponent extends THING.TransformComponent {
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The space relation component of object.
     */
    class SpaceHelperComponent extends THING.BaseComponent {
        /**
         * show bounding
         * @example
         * space.showBounding();
         * @param value - The value
         */
        showBounding(value?: boolean): void;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The space relation component of object.
     */
    class SpaceRelationComponent extends THING.BaseComponent {
        /**
         * contains relation
         * @example
         * let result = this.contains(obj, false);
         console.log(result);
         * @param obj - THe relation object.
         * @param cascade - The cascade.
         */
        contains(obj: any, cascade?: boolean): boolean;
        /**
         * intersects relation
         * @example
         * let result = this.intersects(obj, false);
         console.log(result);
         * @param obj - THe relation object.
         * @param cascade - The cascade.
         */
        intersects(obj: any, cascade?: boolean): boolean;
        /**
         * disjoint relation
         * @example
         * let result = this.disjoint(obj, false);
         console.log(result);
         * @param obj - THe relation object.
         * @param cascade - The cascade.
         */
        disjoint(obj: any, cascade?: boolean): boolean;
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The helper component of spot light object, show auxiliary lines of it.
     */
    class SpotLightHelperComponent extends THING.BaseLineSegmentsHelperComponent {
        /**
         * Show/Hide lines.
         */
        visible: boolean;
        /**
         * Get points of line(s).
         */
        points: Number[][];
        /**
         * Get colors of line(s).
         */
        colors: Number[][];
        /**
         * Get bounding box.
         */
        boundingBox: BoxHelperResult;
        /**
         * Get oriented box.
         */
        orientedBox: BoxHelperResult;
        /**
         * Show/Hide axes helper.
         */
        axes: boolean;
        /**
         * Get/Set axes helper length.
         */
        axesLength: number;
        /**
         * Get the light(s)'s config.
         */
        lights: object[];
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The transform component of object.
     */
    class TransformComponent extends THING.BaseComponent {
        /**
         * When initialize callback function.
         */
        onInit: OnInitComponentCallback;
        /**
         * When load resource callback function.
         */
        onLoadResource: OnLoadResourceComponentCallback;
        /**
         * When unload resource callback function.
         */
        onUnloadResource: OnUnloadResourceComponentCallback;
        /**
         * When update callback function.
         */
        onUpdate: OnUpdateComponentCallback;
        /**
         * When change parent callback function.
         */
        onParentChange: OnParentChangeComponentCallback;
        /**
         * When resize callback function.
         */
        onResize: OnResizeComponentCallback;
        /**
         * When refresh callback function.
         */
        onRefresh: OnRefreshComponentCallback;
        /**
         * When active change callback function.
         */
        onActiveChange: OnActiveChangeComponentCallback;
        /**
         * When visible change callback function.
         */
        onVisibleChange: OnVisibleChangeComponentCallback;
        /**
         * When copy callback function.
         */
        onCopy: OnCopyComponentCallback;
        /**
         * When before add child callback function.
         */
        onBeforeAddChild: OnAddChildComponentCallback;
        /**
         * When after add child callback function.
         */
        onAfterAddChild: OnAddChildComponentCallback;
        /**
         * When before remove child callback function.
         */
        onBeforeRemoveChild: OnRemoveChildComponentCallback;
        /**
         * When after remove child callback function.
         */
        onAfterRemoveChild: OnRemoveChildComponentCallback;
        /**
         * Before add.
         */
        onBeforeAdd: OnBeforeAddComponentCallback;
        /**
         * After add.
         */
        onAfterAdd: OnAfterAddComponentCallback;
        /**
         * Before remove.
         */
        onBeforeRemove: OnBeforeRemoveComponentCallback;
        /**
         * After remove.
         */
        onAfterRemove: OnAfterRemoveComponentCallback;
        /**
         * When import data.
         */
        onImport: OnImportComponentCallback;
        /**
         * When export data.
         */
        onExport: OnExportComponentCallback;
        /**
         * When add component.
         * @param object - The object.
         */
        onAdd(object: THING.BaseObject): void;
        /**
         * When remove component.
         */
        onRemove(): void;
        /**
         * Active or deactive component.
         */
        active: boolean;
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get application.
         */
        app: THING.App;
    }
    /**
     * The application constructor.
     * @example
     * // Load bundle scene
    var app = new THING.App({
         url: './scene-bundle',
         onComplete: (e) = {
        console.log(e);
      }
    });
    
    // Load gltf scene
    var app = new THING.App({
      url: './gltf/scene.gltf',
      onComplete: (e) => {
        console.log(e);
      }
    });
     * @param param - The initial parameters.
     */
    class App extends THING.BaseComponentGroup {
        constructor(param: AppOptions);
        /**
         * The current application.
         * @example
         * let app = THING.App.current;
            app.picker.enable = false;
         */
        current: THING.App;
        /**
         * Dispose.
         * @example
         * app.dispose();
         */
        dispose(): void;
        /**
         * Create Object
         * @example
         * // type:'Box'
        let box01 = app.create({
          type: 'Box',
          name: 'box01',
          position: [1, 1, 1],
          onComplete: function() {
            console.log('box01 created!');
          }
        });
        // type:'FatLine'
        let line = app.create({
         type: 'FatLine',
         points: [[0, 0, 0], [10, 0, 0]],
         width: 3,
         style: {
            opacity: 0.5,
            color: 'red',
         },
         onComplete: function() {
            console.log('line created!');
         }
        });
        
        // type:'HeatmapLayer'
        app.create({
            type: 'HeatmapLayer',
            options: {
                type: "mosaic",
                width: 12,
                height: 10,
                minValue: 10,
                maxValue: 30,
                radius: 5,
                alpha: true,
                mapSize: 256,
            }
        });
         * @param param - The parameter list
         * @param param.type - Object type
         * @param param.options? - Object create parameters
         */
        create(param: {
            type: string;
            options?: any;
        }): THING.BaseObject;
        /**
         * Get the picker.
         * @example
         * let picker = app.picker;
            picker.enable = false;
         */
        picker: THING.Picker;
        /**
         * Get the level manager.
         * @example
         * let level = app.levelManager;
        level.change(app.query('.Entity')[0]);
         */
        levelManager: THING.LevelManager;
        /**
         * Capture screen shot into pixel buffer in RGBA color format.
         * @example
         * let data = THING.App.current.captureScreenshotToData(640, 480);
            console.log(data);
         * @param width - The image width in pixel, if it not provide then use the current width.
         * @param height - The image height in pixel, if it not provide then use the current height.
         */
        captureScreenshotToData(width: number, height: number): Uint8Array;
        /**
         * Capture screen shot into image.
         * @example
         * let image = THING.App.current.captureScreenshotToImage(640, 480);
            console.log(image);
         * @param width - The image width in pixel.
         * @param height - The image height in pixel.
         */
        captureScreenshotToImage(width: number, height: number): any;
        /**
         * Capture screen shot into file.
         * @example
         * THING.App.current.captureScreenshotToFile('cameraCapture', 640, 480);
         * @param fileName - The file name.
         * @param width - The image width in pixel.
         * @param height - The image height in pixel.
         */
        captureScreenshotToFile(fileName: string, width: number, height: number): void;
        /**
         * Get the size.
         * @example
         * let size = app.size;
         */
        size: Number[];
        /**
         * Get the root.
         * @example
         * let root = THING.App.current.root;
            console.log(root.isRootObject);
         */
        root: THING.RootObject;
        /**
         * get all relationships
         * @example
         * let app = THING.App.current;
         console.log(app.relationships);
         */
        readonly relationships: THING.Relationship[];
        /**
         * Get/Set the camera.
         * @example
         * let camera = THING.App.current.camera;
            camera.far = 1000000;
         */
        camera: THING.Camera;
        /**
         * Find children by conditions and returns the first one.
         * @example
         * let entity = THING.App.current.find('.Entity');
            console.log(entity);
         * @param condition - The conditions.
         */
        find(condition: string): THING.BaseObject;
        /**
         * Query children by condition.
         * @example
         * let entities = THING.App.current.query('.Entity');
            console.log(entities);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        query(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let car = THING.App.current.queryByName('car01')
            console.log(car);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: any): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let car = THING.App.current.queryById('1')
            console.log(car);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: any): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let car = THING.App.current.queryByTags('car')
            console.log(car);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: any): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let car = THING.App.current.queryByUUID('100')
            console.log(car);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: any): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let car = THING.App.current.queryByType('car')
            console.log(car);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: any): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let car = THING.App.current.queryByData('test=1')
            console.log(car);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: any): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let car = THING.App.current.queryByReg(/car/)
            console.log(car);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: any): THING.Selector;
        /**
         * Query children by condition in async mode.
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryAsync(condition: string, options: any): Promise<any>;
        /**
         * Query relationships.
         * @example
         * let lightSwitch = new Box();
        let light = new Box();
        let rel = new THING.Relationship({
             type: 'control',
             source: lightSwitch,
             target: light
        });
        app.queryRelationships({type: 'control'});
         * @param options - The options.
         * @param options.type - The type of relationship.
         * @param options.name - The name of relationship.
         */
        queryRelationships(options: {
            type: string;
            name: string;
        }): Relationship[];
        /**
         * Register event.
         * @example
         * THING.App.current.on('click', '.Entity', function(ev) {
                console.log(ev);
            });
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first)
         * @param options - The options.
         * @param options.useCapture - True indicates capture all same events from children.
         */
        on(type: string, condition: string, callback: EventCallback, tag: string, priority: number, options: {
            useCapture: boolean;
        }): void;
        /**
         * Register event what just trigger once time.
         * @example
         * THING.App.current.once('click', '.Entity', function(ev) {
                console.log(ev);
            });
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first)
         * @param options - The options.
         * @param options.useCapture - True indicates capture all same events from children.
         */
        once(type: string, condition: string, callback: EventCallback, tag: string, priority: number, options: {
            useCapture: boolean;
        }): void;
        /**
         * Unregister event.
         * @example
         * THING.App.current.on('click', '.Entity', function(ev) {
                console.log(ev);
            }, 'myClick');
            THING.App.current.off('click', '.Entity', 'myClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * THING.App.current.on('click', '.Entity', function(ev) {
                console.log(ev);
            });
            THING.App.current.pauseEvent('click', '.Entity');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): boolean;
        /**
         * Resume event.
         * @example
         * THING.App.current.on('click', '.Entity', function(ev) {
                console.log(ev);
            });
            THING.App.current.pauseEvent('click', '.Entity');
            THING.App.current.resumeEvent('click', '.Entity');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): boolean;
        /**
         * Trigger event.
         * @example
         * THING.App.current.on('myEvent', function(ev) {
                console.log(ev);
            });
            THING.App.current.trigger('myEvent', { result: true });
         * @param type - The event type.
         * @param ev - The event info.
         * @param options - The options.
         */
        trigger(type: string, ev: any, options: any): any;
        /**
         * Get/Set the background.
         * @example
         * THING.App.current.background = 'gray';
         */
        background: number | string | Number[] | THING.ImageTexture;
        /**
         * Get/Set the default environment map of scene.
         * @example
         * THING.App.current.background = new THING.CubeTexture('./skyboxes/bluesky');
         */
        envMap: THING.CubeTexture;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The global information.
     * @param param - The initial parameters.
     */
    class Global {
        constructor(param: any);
    }
    /**
     * The logo controller.
     */
    class Logo {
    }
    /**
     * The picker to pick object(s).
     */
    class Picker {
        /**
         * Enable/Disable picker.
         */
        enable: boolean;
    }
    /**
     * The scene of object(s).
     * @param param - The initial parameters.
     */
    class Scene {
        constructor(param: any);
        /**
         * Get/Set the ambient light.
         * @example
         * let app = THING.App.current;
            app.scene.ambientLight.color = 'blue';
            app.scene.ambientLight.intensity = 0.1;
         */
        ambientLight: THING.AmbientLight;
    }
    /**
     * System
    The system.
     */
    class System {
    }
    /**
     * BaseBoxHelper
    The box helper object.
     */
    class BaseBoxHelper {
    }
    /**
     * The helper to show in scene.
     */
    class BaseHelper {
        /**
         * Get lines.
         */
        lines: any;
        /**
         * Get/Set visible.
         */
        visible: boolean;
        /**
         * Get/Set color.
         */
        color: number | string | Number[];
    }
    /**
     * BaseSphereHelper
    The sphere helper object.
     */
    class BaseSphereHelper {
    }
    /**
     * The bounding box helper of object, it can show bounding box in scene.
     */
    class ObjectBoxHelper extends THING.BaseBoxHelper {
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get/Set mode type.
         */
        mode: BoxHelperModeType;
    }
    /**
     * The collider box helper of object, it can show collider box in scene.
     */
    class ObjectColliderBoxHelper extends THING.BaseBoxHelper {
    }
    /**
     * The collider sphere helper of object, it can show collider sphere in scene.
     */
    class ObjectColliderSphereHelper {
        /**
         * Get/Set segements.
         */
        segements: number;
    }
    /**
     * The oriented box helper of object, it can show oriented box in scene.
     */
    class ObjectOrientedBoxHelper extends THING.ObjectBoxHelper {
        /**
         * Get object.
         */
        object: THING.BaseObject;
        /**
         * Get/Set mode type.
         */
        mode: BoxHelperModeType;
    }
    /**
     * ActionManager
    The action manager.
     */
    class ActionManager {
        /**
         * Register action.
         * @param name - The action unique name.
         * @param action - The action.
         */
        registerAction(name: string, action: THING.BaseAction): void;
        /**
         * Unregister action.
         * @param name - The action unique name.
         */
        unregisterAction(name: string): void;
        /**
         * Push data then process actions.
         * @example
         * app.actionManager.push([
                {
                    type: 'CameraFlyTo',
                    params: {
                        position: [10, 10, 5],
                        target: [0, 0, 0],
                        time: 1000
                    },
                    delay: 1000,
                    waitForComplete: true
                },
                {
                    type: 'CreateObject',
                    params: {
                        type: 'Box',
                        name: 'box01'
                    },
                    delay: 1000,
                    waitForComplete: true
                },
                {
                    type: 'ObjectSetColor',
                    target: 'box01',
                    params: {
                        color: 'red'
                    },
                    delay: 1000,
                    waitForComplete: true
                }
            ]);
         * @param message - The messages data.
         */
        push(message: ActionMessageData[]): void;
    }
    /**
     * BlueprintManager
    The blueprint manager.
     */
    class BlueprintManager {
    }
    /**
     * The event manager to register, unregister or trigger event(s).
     */
    class EventManager {
    }
    /**
     * The level manager to manage object(s) throught between parent and child object.
     */
    class LevelManager {
        /**
         * Change current level.
         * @param object - The object.
         * @param options - The options.
         */
        change(object: THING.BaseObject, options: LevelChangeOptions): void;
        /**
         * Change current level in async mode.
         * @param object - The object.
         * @param options - The options.
         */
        changeAsync(object: THING.BaseObject, options: LevelChangeOptions): Promise<any>;
        /**
         * Change to the parent level.
         * @param options - The options.
         */
        back(options: LevelChangeOptions): void;
        /**
         * Change to the parent level in async mode.
         * @param options - The options.
         */
        backAsync(options: LevelChangeOptions): Promise<any>;
        /**
         * Quit.
         */
        quit(): Promise<any>;
        /**
         * Enable/Disable level manager.
         */
        enable: boolean;
        /**
         * Get the previous object.
         */
        prev: THING.BaseObject;
        /**
         * Get the current object.
         */
        current: THING.BaseObject;
        /**
         * Check whether is changing level.
         */
        isChanging: boolean;
    }
    /**
     * The object manager to manage object(s) life.
     */
    class ObjectManager {
    }
    /**
     * The relationship manager to manage object(s) life.
     */
    class RelationshipManager {
    }
    /**
     * The state manager to manage state changing.
     */
    class StateManager {
        /**
         * Register state.
         * @example
         * class AState extends THING.BaseState {
            onEnter() {
                console.log('enter A');
            }
        
            onLeave() {
                console.log('leave A');
            }
        };
        
        class BState extends THING.BaseState {
            onEnter() {
                console.log('enter B');
            }
        
            onLeave() {
                console.log('leave B');
            }
        };
        
        class CState extends THING.BaseState {
            onEnter() {
                console.log('enter C');
            }
        
            onLeave() {
                console.log('leave C');
            }
        };
        
        app.stateManager.register('A', new AState());
        app.stateManager.register('B', new BState());
        app.stateManager.register('C', new CState());
         * @param name - The state name.
         * @param state - The state object.
         */
        register(name: string, state: Thing.BaseState): boolean;
        /**
         * Active specified state by name, it would auto leave the current state.
         * @example
         * app.stateManager.change('A');
         * @param name - The state name.
         */
        change(name: string): void;
        /**
         * Active specified state by name, it would NOT leave the current state.
         * @example
         * app.stateManager.set('A');
         * @param name - The state name.
         */
        set(name: string): void;
        /**
         * Get the state object.
         * @param name - The state name.
         */
        get(name: string): Thing.BaseState;
        /**
         * Leave the specfied state.
         * @param name - The state name.
         */
        leave(name: string): void;
        /**
         * Deactivate all states.
         */
        clear(): void;
    }
    /**
     * The tween manager to update value(s) smoothly.
     */
    class TweenManager {
        /**
         * Start lerp to.
         * @param from - The source.
         * @param to - The target.
         * @param [duration = 1000] - The lerp time in milliseconds.
         * @param [delayTime = 0] - The delay time in milliseconds.
         */
        lerpTo(from: number | any, to: number | any, duration?: number, delayTime?: number): LerpToResult;
    }
    /**
     * The math utils.
     */
    class MathUtils {
    }
    /**
     * The ambient light object, just only need 1 in the scene normally.
     * @param param - The initial parameters.
     */
    class AmbientLight extends THING.BaseLight {
        constructor(param: any);
        /**
         * Check whether it's AmbientLight type or inherit from it.
         */
        isAmbientLight: boolean;
        /**
         * Get/Set color.
         */
        color: number | string | Number[];
        /**
         * Get/Set intensity.
         */
        intensity: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The attached point object, it would ignore angels and scales from parent.
     * @param param - The initial parameters.
     */
    class AttachedPoint extends THING.BaseTickableObject3D {
        constructor(param: any);
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Check whether it's AttachedPoint type or inherit from it.
         */
        isAttachedPoint: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base container in scene.
     */
    class BaseContainer3D extends THING.BaseObject {
        /**
         * Check whether it's BaseContainer3D type or inherit from it.
         */
        isBaseContainer3D: boolean;
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set name.
         * @example
         * object.name = 'Car';
        console.log(object.name);
         */
        name: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Add object as child.
         * @example
         * object.add(new THING.Box());
         * @param object - The object what you want to add.
         * @param options - The options.
         */
        add(object: THING.BaseObject, options: any): boolean;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base points object.
     * @param param - The initial parameters.
     */
    class BaseDynamicPoints extends THING.BasePoints {
        constructor(param: any);
        /**
         * Check whether it's BaseDynamicPoints type or inherit from it.
         */
        isBaseDynamicPoints: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base entity object that load 3D model resource in scene.
     * @param param - The initial parameters.
     */
    class BaseEntity extends THING.Object3D {
        constructor(param: any);
        /**
         * Get all animations info.
         */
        animations: AnimationResult[];
        /**
         * Get the animation names.
         */
        animationNames: String[];
        /**
         * Play animation, would stop all other animations.
         * @param param - The parameters.
         */
        playAnimation(param: PlayAnimationArgs): void;
        /**
         * Play animation in async mode, would stop all other animations.
         * @param param - The parameters.
         */
        playAnimationAsync(param: PlayAnimationArgs): Promise<any>;
        /**
         * Blends animation, would not stop all other animations.
         * @param param - The parameters.
         */
        blendAnimation(param: PlayAnimationArgs): void;
        /**
         * Blends animation in async mode, would not stop all other animations.
         * @param param - The parameters.
         */
        blendAnimationAsync(param: PlayAnimationArgs): Promise<any>;
        /**
         * Check whether has animation by name.
         * @param name - The animation name
         */
        hasAnimation(name: string): boolean;
        /**
         * Check whether animation is playing.
         * @param name - The animation name
         */
        isAnimationPlaying(name: string): boolean;
        /**
         * Pause animation(s).
         * @param name - The animation name or name list.
         */
        pauseAnimation(name: string | String[]): void;
        /**
         * Pause all animations.
         */
        pauseAllAnimations(): void;
        /**
         * Resume animation(s).
         * @param name - The animation name or name list.
         */
        resumeAnimation(name: string | String[]): void;
        /**
         * Resume all animations.
         */
        resumeAllAnimations(): void;
        /**
         * Stop animation.
         * @param name - The animation name.
         */
        stopAnimation(name: string): void;
        /**
         * Stop all animations.
         */
        stopAllAnimations(): void;
        /**
         * Get animation info.
         * @param name - The animation name.
         */
        getAnimation(name: string): AnimationResult;
        /**
         * Get animation state.
         * @param name - The animation name.
         */
        getAnimationState(name: string): PlayStateType;
        /**
         * Get playing animations.
         */
        getPlayingAnimations(): AnimationResult[];
        /**
         * Get animation direction type.
         * @param name - The animation name.
         */
        getAnimationDirectionType(name: string): AnimationDirectionType;
        /**
         * Set animation direction type.
         * @param name - The animation name.
         * @param value - The direction type.
         */
        setAnimationDirectionType(name: string, value: AnimationDirectionType): boolean;
        /**
         * Get animation speed.
         * @param name - The animation name.
         */
        getAnimationSpeed(name: string): number;
        /**
         * Set animation speed.
         * @param name - The animation name.
         * @param value - The speed.
         */
        setAnimationSpeed(name: string, value: number): boolean;
        /**
         * Promote node as child object.
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.BaseEntity;
        /**
         * Check whether it's BaseEntity type or inherit from it.
         */
        isBaseEntity: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base light object.
     * @param param - The initial parameters.
     */
    class BaseLight extends THING.BaseTickableObject3D {
        constructor(param: any);
        /**
         * Get/Set color.
         */
        color: number | string | Number[];
        /**
         * Get/Set intensity.
         */
        intensity: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base line object.
     * @param param - The initial parameters.
     */
    class BaseLine extends THING.BaseDynamicPoints {
        constructor(param: any);
        /**
         * Get/Set UV mode type.
         */
        uvModeType: UVModeType;
        /**
         * Get/Set groups of points index.
         * @example
         * line.points = [[10, 10, 10], [20, 10, 10], [30, 10, 10], [40, 10, 10], [50, 10, 10], [60, 10, 10]];
        line.groups = [[0, 2], [4, 1]];
         */
        groups: Number[][];
        /**
         * Get/Set the group picked Ids.
         */
        groupPickedIds: Number[];
        /**
         * Enable/Disable closure.
         */
        closure: boolean;
        /**
         * Check whether it's BaseDynamicPoints type or inherit from it.
         */
        isBaseDynamicPoints: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * BaseModelObject3D
    The base model object 3D.
     */
    class BaseModelObject3D extends THING.Object3D {
        /**
         * Check whether it's BaseModelObject3D type or inherit from it.
         */
        isBaseModelObject3D: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base object.
     * @param param - The initial parameters.
     */
    class BaseObject extends THING.BaseComponentGroup {
        constructor(param: BaseObjectInitialOptions);
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set name.
         * @example
         * object.name = 'Car';
        console.log(object.name);
         */
        name: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Add object as child.
         * @example
         * object.add(new THING.Box());
         * @param object - The object what you want to add.
         * @param options - The options.
         */
        add(object: THING.BaseObject, options: any): boolean;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base points object in plane.
     * @param param - The initial parameters.
     */
    class BasePlanePoints extends THING.BaseDynamicPoints {
        constructor(param: any);
        /**
         * Get/Set the holes in world space.
         */
        holes: Number[][][];
        /**
         * Get the area.
         */
        area: number;
        /**
         * Get the perimeter.
         */
        perimeter: number;
        /**
         * Get the label position in world space.
         */
        labelPosition: Number[];
        /**
         * Get the outline points in plane.
         */
        outlinePoints: Number[][];
        /**
         * Check whether it's BaseDynamicPoints type or inherit from it.
         */
        isBaseDynamicPoints: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base points object.
     * @param param - The initial parameters.
     */
    class BasePoints extends THING.Object3D {
        constructor(param: any);
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base light object that can cast shadow.
     * @param param - The initial parameters.
     */
    class BaseShadowLight extends THING.BaseLight {
        constructor(param: any);
        /**
         * Enable/Disable shadow.
         */
        enableShadow: boolean;
        /**
         * Enable/Disable cast shadow.
         */
        castShadow: boolean;
        /**
         * Get/Set shadow quality.
         */
        shadowQuality: ShadowQualityType | number;
        /**
         * Get/Set shadow bias.
         */
        shadowBias: number;
        /**
         * Get/Set shadow range.
         */
        shadowRange: ShadowRangeInfo;
        /**
         * Get/Set color.
         */
        color: number | string | Number[];
        /**
         * Get/Set intensity.
         */
        intensity: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base tickable object that can invoke onUpdate() automaticly.
     * @param param - The initial parameters.
     */
    class BaseTickableObject extends THING.BaseObject {
        constructor(param: any);
        /**
         * Check whether it's BaseTickableObject type or inherit from it.
         */
        isBaseTickableObject: boolean;
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set name.
         * @example
         * object.name = 'Car';
        console.log(object.name);
         */
        name: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Add object as child.
         * @example
         * object.add(new THING.Box());
         * @param object - The object what you want to add.
         * @param options - The options.
         */
        add(object: THING.BaseObject, options: any): boolean;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The base tickable object that can invoke onUpdate() automaticly in scene.
     * @param param - The initial parameters.
     */
    class BaseTickableObject3D extends THING.Object3D {
        constructor(param: any);
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The body object to access object's self renderable node(s).
     */
    class BodyObject {
        /**
         * Get/Set visible state.
         * @example
         * object.body.visible = false;
         */
        visible: boolean;
        /**
         * Get/Set local(offset) position of the parent space.
         * @example
         * object.body.localPosition = [0, 10, 0];
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         * @example
         * object.body.localAngles = [0, 90, 0];
         */
        localAngles: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         * @example
         * object.body.localScale = [3, 3, 3];
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         * @example
         * object.body.position = [0, 10, 0];
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         * @example
         * object.body.angles = [0, 90, 0];
         */
        angles: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         * @example
         * object.body.scale = [3, 3, 3];
         */
        scale: Number[];
        /**
         * Get/Set the transform.
         * @example
         * object.body.matrix = THING.Math.mat4.fromTranslation([], [10, 10, 10]);
         */
        matrix: Number[];
        /**
         * Get/Set the world transform.
         * @example
         * object.body.matrixWorld = THING.Math.mat4.fromTranslation([], [10, 10, 10]);
         */
        matrixWorld: Number[];
        /**
         * Get/Set style of body.
         * @example
         * let style = object.body.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
    }
    /**
     * The box object in scene.
     * @param width - The width, default is 1.
     * @param height - The height, default is 1.
     * @param depth - The depth, default is 1.
     * @param param - The initial parameters.
     */
    class Box extends THING.BaseModelObject3D {
        constructor(width: number, height: number, depth: number, param: any);
        /**
         * Get/Set the width.
         */
        width: number;
        /**
         * Get/Set the height.
         */
        height: number;
        /**
         * Get/Set the depth.
         */
        depth: number;
        /**
         * Check whether it's BaseModelObject3D type or inherit from it.
         */
        isBaseModelObject3D: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The camera object in scene.
     * @param param - The initial parameters.
     */
    class Camera extends THING.Object3D {
        constructor(param: any);
        /**
         * Convert world position to screen position.
         * @example
         * let screen0 = THING.App.current.camera.worldToScreen([100, 100, 90]);
            let screen1 = THING.App.current.camera.worldToScreen([100, 100, 100]);
            if (screen0 < screen1) {
                console.log('screen0 is closer to the camera than screen1');
            }
         * @param position - The world position.
         * @returns The screen position in [x, y, z] format, [z] indicates the sort order for 2D element.
         */
        worldToScreen(position: Number[]): Number[];
        /**
         * Convert screen position to world position.
         * @example
         * let position = THING.App.current.camera.screenToWorld([100, 100]);
         * @param screenPosition - The screen position.
         */
        screenToWorld(screenPosition: Number[]): Number[];
        /**
         * Capture to render texture.
         * @example
         * let renderTexture = THING.App.current.camera.captureToRenderTexture();
        renderTexture.download('myScreenshot');
         * @param width - The image width in pixel, if it not provide then use the current width.
         * @param height - The image height in pixel, if it not provide then use the current height.
         */
        captureToRenderTexture(width: number, height: number): THING.RenderTexture;
        /**
         * Capture render result to pixel buffer in RGBA color format.
         * @example
         * let data = THING.App.current.camera.captureToData(1024, 768);
         * @param width - The image width in pixel, if it not provide then use the current width.
         * @param height - The image height in pixel, if it not provide then use the current height.
         */
        captureToData(width: number, height: number): Uint8Array;
        /**
         * Capture render result into image.
         * @example
         * let image = THING.App.current.camera.captureToImage(1024, 768);
         * @param width - The image width in pixel, if it not provide then use the current width.
         * @param height - The image height in pixel, if it not provide then use the current height.
         */
        captureToImage(width: number, height: number): any;
        /**
         * Capture render result to file(PNG format) in download mode.
         * @example
         * THING.App.current.camera.captureToFile('myScreenshot');
         * @param fileName - The file name.
         * @param width - The image width in pixel, if it not provide then use the current width.
         * @param height - The image height in pixel, if it not provide then use the current height.
         */
        captureToFile(fileName: string, width: number, height: number): void;
        /**
         * Enable/Disable viewport.
         * @example
         * let camera = new THING.Camera();
        camera.enableViewport = true;
         */
        enableViewport: boolean;
        /**
         * Get/Set viewport of screen [x, y, width, height].
         * @example
         * let camera = new THING.Camera();
        camera.viewport = [0, 0, 100, 100],
         */
        viewport: Number[];
        /**
         * Get/Set render texture.
         * @example
         * let renderTexture = new THING.RenderTexture({
                size: THING.App.current.size
            });
        
            let camera = new THING.Camera();
            camera.renderTexture = renderTexture;
         */
        renderTexture: THING.RenderTexture;
        /**
         * Get projection type.
         * @example
         * let projectionType = THING.App.current.camera.getProjectionType();
         */
        getProjectionType(): ProjectionType;
        /**
         * Set projection type.
         * @example
         * THING.App.current.camera.setProjectionType(THING.ProjectionType.Orthographic);
         * @param value - The projection value.
         * @param duration - The projection matrix lerping time in milliseconds.
         */
        setProjectionType(value: ProjectionType, duration?: number): void;
        /**
         * Get view mode type.
         * @example
         * let viewMode = THING.App.current.camera.getViewMode();
         */
        getViewMode(): ViewMode;
        /**
         * Set view mode type.
         * @example
         * THING.App.current.camera.setViewMode(THING.App.current.root, THING.ViewModeType.Top);
         * @param target - The target object, if do not provide then would use level's current object or root object.
         * @param value - The view mode value.
         * @param duration - The projection matrix lerping time in milliseconds.
         */
        setViewMode(target: THING.Object3D, value: ViewMode, duration?: number): void;
        /**
         * Get view mode type.
         */
        getViewModeType(): ViewMode;
        /**
         * Set view mode type.
         * @param target - The target object, if do not provide then would use level's current object or root object.
         * @param value - The view mode value.
         * @param duration - The projection matrix lerping time in milliseconds.
         */
        setViewModeType(target: THING.Object3D, value: ViewMode, duration?: number): void;
        /**
         * Get/Set fov.
         * @example
         * THING.App.current.camera.fov = 60;
         */
        fov: number;
        /**
         * Get/Set near.
         * @example
         * THING.App.current.camera.near = 0.001;
         */
        near: number;
        /**
         * Get/Set far.
         * @example
         * THING.App.current.camera.far = 1000000;
         */
        far: number;
        /**
         * Get aspect.
         * @example
         * let aspect = THING.App.current.camera.aspect;
         */
        readonly aspect: number;
        /**
         * Get/Set projection type.
         * @example
         * THING.App.current.camera.projectionType = THING.ProjectionType.Orthographic;
         */
        projectionType: ProjectionType;
        /**
         * Get/Set view mode type.
         * @example
         * THING.App.current.camera.viewMode = THING.ViewModeType.Top;
         */
        viewMode: ViewMode;
        /**
         * Get/Set view mode type.
         */
        viewModeType: ViewMode;
        /**
         * Check intersection between object and region.
         * @example
         * if (THING.App.current.camera.intersectObjectInRegion([0, 0, 100, 100], object)) {
            console.log('intersect OK');
        }
         * @param region - The [left, top, width, height] region in screen.
         * @param object - The object.
         */
        intersectObjectInRegion(region: Number[], object: THING.Object3D): boolean;
        /**
         * Pick node.
         * @example
         * let result = THING.App.current.camera.pick(100, 100);
            if (result) {
                console.log('picked result: ', result.object);
            }
         * @param x - The x coordinate in screen.
         * @param y - The y coordinate in screen.
         * @param root? - The root object to pick.
         */
        pick(x: number, y: number, root?: THING.BaseObject): PickResult;
        /**
         * Pick from cross planes.
         * @example
         * let result = THING.App.current.camera.pickFromCrossPlanes(100, 100);
            if (result) {
                console.log('picked result: ', result.object);
            }
         * @param x - The x coordinate in screen.
         * @param y - The y coordinate in screen.
         */
        pickFromCrossPlanes(x: number, y: number): PickResult;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The clipping planes that use with object style to clip object by planes.
     * @param param - The initial parameters.
     */
    class ClippingPlanes extends THING.BaseTickableObject3D {
        constructor(param: any);
        /**
         * Get/Set the clipping planes.
         */
        planes: ClippingPlaneResult[];
        /**
         * Check whether it's ClippingPlanes type or inherit from it.
         */
        isClippingPlanes: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The directional light object in scene.
     * @param param - The initial parameters.
     */
    class DirectionalLight extends THING.BaseShadowLight {
        constructor(param: any);
        /**
         * Check whether it's DirectionalLight type or inherit from it.
         */
        isDirectionalLight: boolean;
        /**
         * Enable/Disable shadow.
         */
        enableShadow: boolean;
        /**
         * Enable/Disable cast shadow.
         */
        castShadow: boolean;
        /**
         * Get/Set shadow quality.
         */
        shadowQuality: ShadowQualityType | number;
        /**
         * Get/Set shadow bias.
         */
        shadowBias: number;
        /**
         * Get/Set shadow range.
         */
        shadowRange: ShadowRangeInfo;
        /**
         * Get/Set color.
         */
        color: number | string | Number[];
        /**
         * Get/Set intensity.
         */
        intensity: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * Entity
    The entity object.
     */
    class Entity extends THING.BaseEntity {
    }
    /**
     * The extrude shape object that create polygon shape by height in scene.
     * @param param - The initial parameters.
     */
    class ExtrudeShape extends THING.BaseDynamicPoints {
        constructor(param: any);
        /**
         * Get/Set the holes in self space.
         */
        selfHoles: Number[][][];
        /**
         * Get/Set the holes in world space.
         */
        holes: Number[][][];
        /**
         * Get/Set the height.
         */
        height: number;
        /**
         * Check whether it's BaseDynamicPoints type or inherit from it.
         */
        isBaseDynamicPoints: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The fat line object in scene.
     * @param param - The initial parameters.
     */
    class FatLine extends THING.BaseLine {
        constructor(param: any);
        /**
         * Get/Set width.
         */
        width: number;
        /**
         * Get/Set corner threshold in (0, 1].
         */
        cornerThreshold: number;
        /**
         * Get/Set UV mode type.
         */
        uvModeType: UVModeType;
        /**
         * Get/Set groups of points index.
         * @example
         * line.points = [[10, 10, 10], [20, 10, 10], [30, 10, 10], [40, 10, 10], [50, 10, 10], [60, 10, 10]];
        line.groups = [[0, 2], [4, 1]];
         */
        groups: Number[][];
        /**
         * Get/Set the group picked Ids.
         */
        groupPickedIds: Number[];
        /**
         * Enable/Disable closure.
         */
        closure: boolean;
        /**
         * Check whether it's BaseDynamicPoints type or inherit from it.
         */
        isBaseDynamicPoints: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * THe hemisphere light object in scene.
     * @param param - The initial parameters.
     */
    class HemisphereLight extends THING.BaseLight {
        constructor(param: any);
        /**
         * Get/Set ground color.
         */
        groundColor: number | string | Number[];
        /**
         * Check whether it's HemisphereLight type or inherit from it.
         */
        isHemisphereLight: boolean;
        /**
         * Get/Set color.
         */
        color: number | string | Number[];
        /**
         * Get/Set intensity.
         */
        intensity: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The label object that show text in plane in scene.
     * @param param - The initial parameters.
     */
    class Label extends THING.Marker {
        constructor(param: any);
        /**
         * Get/Set font text.
         */
        fontText: string;
        /**
         * Get/Set font type.
         */
        fontType: string;
        /**
         * Get/Set font size.
         */
        fontSize: number;
        /**
         * Get/Set font line width.
         */
        fontLineWidth: number;
        /**
         * Get/Set font line height, 0 indicates use font size auto.
         */
        fontLineHeight: number;
        /**
         * Get/Set font color.
         */
        fontColor: number | string | Number[];
        /**
         * Get/Set font shadow color.
         */
        fontShadowColor: number | string | Number[];
        /**
         * Get/Set font shadow alpha.
         */
        fontShadowAlpha: number;
        /**
         * Get/Set font shadow angle.
         */
        fontShadowAngle: number;
        /**
         * Get/Set font shadow blur.
         */
        fontShadowBlur: number;
        /**
         * Get/Set font shadow distance.
         */
        fontShadowDistance: number;
        /**
         * Get/Set font align type.
         */
        fontAlignType: AlignType;
        /**
         * Enable/Disable rich text.
         */
        richText: boolean;
        /**
         * Get/Set font weight.
         */
        fontWeight: FontWeight;
        /**
         * Enable/Disable auto fit body scale, true indicates it will use the ratio of style's image size to fit body scale.
        Default value is: false.
         * @example
         * marker.autoFitBodyScale = true;
         */
        autoFitBodyScale: boolean;
        /**
         * Get/Set scale factor of autoFitBodyScale attribute(only works when [autoFitBodyScale=true]).
        Default value is: 0.01.
         * @example
         * marker.scaleFactor = 0.1;
         */
        scaleFactor: number;
        /**
         * Get/Set the render type.
         */
        renderType: RenderType;
        /**
         * Get/Set the rotation in degree, only works on THING.RenderType.Sprite mode.
         */
        rotation: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The lensflare object.
     * @param param - The initial parameters.
     */
    class Lensflare extends THING.Object3D {
        constructor(param: any);
        /**
         * Get/Set the occlusion scale of lensflare.
         */
        occlusionScale: number;
        /**
         * Add element
         * @param element - The lensflare element.
         */
        addElement(element: LensflareElement): void;
        /**
         * Remove element by index.
         * @param index - The lensflare element at this index will be removed.
         */
        removeElement(index: number): void;
        /**
         * Clear the elements of lensflare.
         */
        clearElements(): void;
        /**
         * Get all elements of lensflare.
         */
        getAllElements(): LensflareElement[];
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The marker object that show image in scene.
     * @param param - The initial parameters.
     */
    class Marker extends THING.Object3D {
        constructor(param: any);
        /**
         * Enable/Disable auto fit body scale, true indicates it will use the ratio of style's image size to fit body scale.
        Default value is: false.
         * @example
         * marker.autoFitBodyScale = true;
         */
        autoFitBodyScale: boolean;
        /**
         * Get/Set scale factor of autoFitBodyScale attribute(only works when [autoFitBodyScale=true]).
        Default value is: 0.01.
         * @example
         * marker.scaleFactor = 0.1;
         */
        scaleFactor: number;
        /**
         * Get/Set the render type.
         */
        renderType: RenderType;
        /**
         * Get/Set the rotation in degree, only works on THING.RenderType.Sprite mode.
         */
        rotation: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The mesh object that with custom geometry info in scene.
     * @param param - The initial parameters.
     */
    class Mesh extends THING.Object3D {
        constructor(param: any);
        /**
         * Set the vertex of the mesh.Use the current interface when the geometry references only itself, and use the attribute (mesh.geometry.position) interface when the geometry is shared.
         */
        setPosition(array: Number[] | Float32Array): void;
        /**
         * Set the vertex uv of the mesh.Use the current interface when the geometry references only itself, and use the attribute (mesh.geometry.uv) interface when the geometry is shared.
         */
        setUv(array: Number[] | Float32Array): void;
        /**
         * Set the vertex normal of the mesh.Use the current interface when the geometry references only itself, and use the attribute (mesh.geometry.normal) interface when the geometry is shared.
         */
        setNormal(array: Number[] | Float32Array): void;
        /**
         * Get mesh data.
         */
        data: any;
        /**
         * Check whether it's Mesh type or inherit from it.
         */
        isMesh: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The sub node object that to get meshes from renderable object in scene.
     * @param param - The initial parameters.
     */
    class NodeObject {
        constructor(param: any);
        /**
         * Convert local position to self position.
         * @param position - The local position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        localToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to local position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToLocal(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert local position to world position.
         * @param position - The local position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        localToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert world position to local position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToLocal(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Get/Set local position.
         * @example
         * object.body.nodes[0].localPosition = [10, 10, 10];
         */
        localPosition: Number[];
        /**
         * Get/Set local quaternion.
         * @example
         * object.body.nodes[0].localQuaternion = THING.Math.getQuatFromAngles([45, 45, 45]);
         */
        localQuaternion: Number[];
        /**
         * Get/Set local angles.
         * @example
         * object.body.nodes[0].localAngles = [45, 45, 45];
         */
        localAngles: Number[];
        /**
         * Get/Set local scale.
         * @example
         * object.body.nodes[0].localScale = [3, 3, 3];
         */
        localScale: Number[];
        /**
         * Get/Set world position.
         * @example
         * object.body.nodes[0].position = [10, 10, 10];
         */
        position: Number[];
        /**
         * Get/Set world quaternion.
         * @example
         * object.body.nodes[0].quaternion = THING.Math.getQuatFromAngles([45, 45, 45]);
         */
        quaternion: Number[];
        /**
         * Get/Set world angles.
         * @example
         * object.body.nodes[0].angles = [45, 45, 45];
         */
        angles: Number[];
        /**
         * Get/Set world scale.
         * @example
         * object.body.nodes[0].scale = [3, 3, 3];
         */
        scale: Number[];
        /**
         * Get/Set matrix.
         * @example
         * object.body.nodes[0].matrix = THING.Math.composeToMat4([10, 10, 10], [0, 0, 0, 1], [2, 2, 2]);
         */
        matrix: Number[];
        /**
         * Get/Set matrix world.
         * @example
         * object.body.nodes[0].matrixWorld = THING.Math.composeToMat4([10, 10, 10], [0, 0, 0, 1], [2, 2, 2]);
         */
        matrixWorld: Number[];
    }
    /**
     * The base object in scene.
     * @param param - The initial parameters.
     */
    class Object3D extends THING.BaseObject {
        constructor(param: Object3DInitialOptions);
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * ParticleEmitter
    The particle emitter.
     * @example
     * const emitter = new THING.ParticleEmitter();
    emitter.particleCount = 100;
    emitter.distribution = 1;
    emitter.duration = 2;
    emitter.isLookAtCamera = true;
    emitter.isLookAtCameraY = true;
    emitter.wiggle = {
        spread:0,
        value:0
    };
    emitter.rotation = {
        axisSpread:[0, 0, 0],
        randomise:false,
        angleSpread:0,
        center:[0, 0, 0],
        angle:0,
        static:false,
        axis:[0, 1, 0]
    };
    emitter.velocity = {
        randomise:false,
        value:[0, 25, 0],
        distribution:1,
        spread:[10, 7.5, 10]
    };
    emitter.size = {
        randomise:[false, false],
        spread:[0, 0],
        value:[2, 0]
    };
    emitter.angle = {
        randomise:[false, false],
        spread:[0, 0],
        value:[1, 0]
    };
    emitter.opacity = {
        randomise:[false, false],
        spread:[0, 0],
        value:[1, 0.1]
    };
    emitter.color = {
        randomise:[false, false],
        spread:[[0, 0, 0], [0, 0, 0]],
        value:[[0, 0, 0], [1, 1, 0]]
    };
    emitter.acceleration = {
        randomise:false,
        value:[0, -10, 0],
        distribution:1,
        spread:[0, 0, 0]
    };
    emitter.maxAge = {
        spread:0,
        value:2
    };
    emitter.position = {
     randomise:false,
     radius:10,
     spreadClamp:[0, 0, 0],
     value:[0, 0, -50],
     radiusScale:[1, 1, 1],
     distribution:1,
     spread:[0, 0, 0]
    };
    emitter.drag = {
     randomise:false,
     spread:0,
     value:0
    };
     */
    class ParticleEmitter {
        /**
         * Get/Set particle count.The count of particle when rendering.
         */
        particleCount: number;
        /**
         * Get/Set distribution.It use to control its particle's spawn position and force behaviour.The options are 1(Box),2(Sphere),3(Disc),4(Line).
         */
        distribution: number;
        /**
         * Get/Set duration.The duration in seconds that this emitter should live for.If not specified, the emitter will emit particles indefinitely.
         */
        duration: number | null;
        /**
         * Get/Set IsLookAtCamera.It takes effect when UseMesh is true.True indicates its particle will always look at camera.
         */
        isLookAtCamera: boolean;
        /**
         * Get/Set IsLookAtCamera.It takes effect when UseMesh is true.True indicates its particle will always look at camera and lock y-axis.
         */
        isLookAtCameraY: boolean;
        /**
         * Get/Set maxAge attribute.
         */
        maxAge: MaxAge;
        /**
         * Get position.
         */
        position: Position;
        /**
         * Get rotation.
         */
        rotation: Rotation;
        /**
         * Get velocity.
         */
        velocity: Velocity;
        /**
         * Get color.
         */
        color: ListColor;
        /**
         * Get opacity.
         */
        opacity: ListOpacity;
        /**
         * Get size.
         */
        size: ListSize;
        /**
         * Get angle.
         */
        angle: ListAngle;
        /**
         * Get acceleration.
         */
        acceleration: Acceleration;
        /**
         * Get drag attribute.
         */
        drag: Drag;
    }
    /**
     * ParticleGroup
    The particle group.
     * @example
     * const group = new THING.ParticleGroup();
    group.maxParticleCount = 200;
    group.useMesh = false;
    group.meshUrl = "BuildIn/Box";
    group.texture = {
        url:"./particle.png"
    };
    group.blendingMode = "normal";
    group.isTransparent = true;
    group.alphaTest = true;
    group.depthWrite = false;
    group.depthTest = false;
    group.url = "./particle.png";
     */
    class ParticleGroup {
        /**
         * Add emitter.
         * @example
         * const emitter = new THING.ParticelEmitter();
        group.addEmitter(emitter);
         * @param emitter - The emitter.
         */
        addEmitter(emitter: ParticleEmitter): ParticleEmitter;
        /**
         * Remove emitter by ParticleEmitter.
         * @example
         * const emitter = group.getEmitters();
        group.removeEmitter(emitter);
         * @param emitter - The emitter.
         */
        removeEmitter(emitter: ParticleEmitter): void;
        /**
         * Get emitters.
         */
        emitters: ParticleEmitter[];
        /**
         * Get/Set maxParticleCount.The max count of these particle.
         */
        maxParticleCount: number;
        /**
         * Get/Set useMesh.True indicates these particle use mesh but not points.
         */
        useMesh: boolean;
        /**
         * Get/Set mesh url.It takes effect when UseMesh is true, and indicates particle mesh type.The options are 'BuildIn/Box', 'BuildIn/Plane', 'BuildIn/Sphere'.
         */
        meshUrl: string;
        /**
         * Get/Set texture.The image value of particle.
         */
        texture: ImageTextureResource;
        /**
         * Get/Set blend mode.The blend mode of these particle.The options are 'none', 'normal', 'add', 'sub', 'mul', 'custom'.
         */
        blendingMode: string;
        /**
         * Get/Set isTransparent.True indicates these particle's should be rendered with transparency.
         */
        isTransparent: boolean;
        /**
         * Get/Set alphaTest.Sets the alpha value to particle. Value between 0 and 1.
         */
        alphaTest: number;
        /**
         * Get/Set depthWrite.Sets the depthWrite to particle.
         */
        depthWrite: boolean;
        /**
         * Get/Set depthTest.Sets the depthTest to particle.
         */
        depthTest: boolean;
        /**
         * Get/Set texture url.The image url of particle.
         */
        url: string;
    }
    /**
     * The particle system object in scene.
     * @param param - The initial parameters.
     */
    class ParticleSystem extends THING.BaseTickableObject3D {
        constructor(param: any);
        /**
         * Add group.
         * @example
         * const group = new THING.ParticleGroup();
            particleSystem.addGroup(group);
         * @param group - The group.
         */
        addGroup(group: ParticleGroup): ParticleGroup;
        /**
         * Remove group.
         * @example
         * const groups = particleSystem.getGroups();
            particleSystem.removeGroup(groups[0]);
         * @param group - The group.
         */
        removeGroup(group: ParticleGroup): void;
        /**
         * Get current ParticleSystem data.
         * @example
         * const data = particleSystem.getParticleData({ dataVersion2:false });
         * @param param - { dataVersion2:false } Get data for thingjs2.0 when dataVersion2 is true.
         * @returns ParticleSystem data
         */
        getParticleData(param: any): any;
        /**
         * Get groups.
         */
        groups: ParticleGroup[];
        /**
         * Check whether it's ParticleSystem type or inherit from it.
         */
        isParticleSystem: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The pixel line object in scene.
     * @param param - The initial parameters.
     */
    class PixelLine extends THING.BaseLine {
        constructor(param: any);
        /**
         * Check whether it's PixelLine type or inherit from it.
         */
        isPixelLine: boolean;
        /**
         * Get/Set UV mode type.
         */
        uvModeType: UVModeType;
        /**
         * Get/Set groups of points index.
         * @example
         * line.points = [[10, 10, 10], [20, 10, 10], [30, 10, 10], [40, 10, 10], [50, 10, 10], [60, 10, 10]];
        line.groups = [[0, 2], [4, 1]];
         */
        groups: Number[][];
        /**
         * Get/Set the group picked Ids.
         */
        groupPickedIds: Number[];
        /**
         * Enable/Disable closure.
         */
        closure: boolean;
        /**
         * Check whether it's BaseDynamicPoints type or inherit from it.
         */
        isBaseDynamicPoints: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The pixel line segments that with points and colors in scene.
     * @param param - The initial parameters.
     */
    class PixelLineSegments extends THING.BasePoints {
        constructor(param: any);
        /**
         * Check whether it's PixelLineSegments type or inherit from it.
         */
        isPixelLineSegments: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The plane object in scene.
     * @param width - The width, default is 1.
     * @param height - The height, default is 1.
     * @param param - The initial parameters.
     */
    class Plane extends THING.BaseModelObject3D {
        constructor(width: number, height: number, param: any);
        /**
         * Get/Set the width.
         */
        width: number;
        /**
         * Get/Set the height.
         */
        height: number;
        /**
         * Check whether it's BaseModelObject3D type or inherit from it.
         */
        isBaseModelObject3D: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The plane region with points in scene.
     * @param param - The initial parameters.
     */
    class PlaneRegion extends THING.BasePlanePoints {
        constructor(param: any);
        /**
         * Check whether it's PlaneRegion type or inherit from it.
         */
        isPlaneRegion: boolean;
        /**
         * Get/Set the holes in world space.
         */
        holes: Number[][][];
        /**
         * Get the area.
         */
        area: number;
        /**
         * Get the perimeter.
         */
        perimeter: number;
        /**
         * Get the label position in world space.
         */
        labelPosition: Number[];
        /**
         * Get the outline points in plane.
         */
        outlinePoints: Number[][];
        /**
         * Check whether it's BaseDynamicPoints type or inherit from it.
         */
        isBaseDynamicPoints: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The points object in scene.
     * @param param - The initial parameters.
     */
    class Points extends THING.BasePoints {
        constructor(param: any);
        /**
         * Get/Set the size.
         */
        size: number;
        /**
         * Get/Set the image ratio.
         */
        imageRatio: number;
        /**
         * Enable/Disable the size attenuation.
         */
        sizeAttenuation: boolean;
        /**
         * Get/Set the picked Ids.
         */
        pickedIds: Number[];
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The polygon line object in scene.
     * @param param - The initial parameters.
     */
    class PolygonLine extends THING.BaseLine {
        constructor(param: any);
        /**
         * Get/Set radius, default is 0.1 (Can not be negative number).
         */
        radius: number;
        /**
         * Get/Set radius of corner (Should be greater than radius).
         */
        cornerRadius: number;
        /**
         * Get/Set split of corner, only works with integer type.
         */
        cornerSplit: number;
        /**
         * Get/Set radial segments (Must be integer type and greater than 2).
         */
        radialSegments: number;
        /**
         * Get/Set start of degree.
         */
        startDegree: number;
        /**
         * Get/Set UV mode type.
         */
        uvModeType: UVModeType;
        /**
         * Get/Set groups of points index.
         * @example
         * line.points = [[10, 10, 10], [20, 10, 10], [30, 10, 10], [40, 10, 10], [50, 10, 10], [60, 10, 10]];
        line.groups = [[0, 2], [4, 1]];
         */
        groups: Number[][];
        /**
         * Get/Set the group picked Ids.
         */
        groupPickedIds: Number[];
        /**
         * Enable/Disable closure.
         */
        closure: boolean;
        /**
         * Check whether it's BaseDynamicPoints type or inherit from it.
         */
        isBaseDynamicPoints: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The root object of all objects.
     * @param param - The initial parameters.
     */
    class RootObject extends THING.Object3D {
        constructor(param: any);
        /**
         * Check whether it's RootObject type or inherit from it.
         */
        isRootObject: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The route line object in scene.
     * @param param - The initial parameters.
     */
    class RouteLine extends THING.BaseLine {
        constructor(param: any);
        /**
         * Get/Set the facing direction of self space.
         */
        facingDirection: Number[];
        /**
         * Get/Set width.
         */
        width: number;
        /**
         * Get/Set radius of corner (Should be greater than half of width).
         */
        cornerRadius: number;
        /**
         * Get/Set split of corner, only works with integer type.
         */
        cornerSplit: number;
        /**
         * Enable/Disable arrow.
         */
        arrow: number;
        /**
         * Get/Set UV mode type.
         */
        uvModeType: UVModeType;
        /**
         * Get/Set groups of points index.
         * @example
         * line.points = [[10, 10, 10], [20, 10, 10], [30, 10, 10], [40, 10, 10], [50, 10, 10], [60, 10, 10]];
        line.groups = [[0, 2], [4, 1]];
         */
        groups: Number[][];
        /**
         * Get/Set the group picked Ids.
         */
        groupPickedIds: Number[];
        /**
         * Enable/Disable closure.
         */
        closure: boolean;
        /**
         * Check whether it's BaseDynamicPoints type or inherit from it.
         */
        isBaseDynamicPoints: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The space3D object.
     * @param param - The initial parameters.
     */
    class Space3D extends THING.Object3D {
        constructor(param: any);
        /**
         * contains relation
         * @example
         * let result = this.contains(obj, false);
         console.log(result);
         * @param obj - THe relation object.
         * @param cascade - The cascade.
         */
        contains(obj: any, cascade?: boolean): boolean;
        /**
         * intersects relation
         * @example
         * let result = this.intersects(obj, false);
         console.log(result);
         * @param obj - THe relation object.
         * @param cascade - The cascade.
         */
        intersects(obj: any, cascade?: boolean): boolean;
        /**
         * disjoint relation
         * @example
         * let result = this.disjoint(obj, false);
         console.log(result);
         * @param obj - THe relation object.
         * @param cascade - The cascade.
         */
        disjoint(obj: any, cascade?: boolean): boolean;
        /**
         * show bounding
         * @example
         * space.showBounding();
         * @param value - The value
         */
        showBounding(value?: boolean): void;
        /**
         * The object size
         */
        size: Number[];
        /**
         * Check whether it's Space3D type or inherit from it.
         */
        isSpace3D: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The sphere object in scene.
     * @param radius - The radius, default is 0.5.
     * @param param - The initial parameters.
     */
    class Sphere extends THING.BaseModelObject3D {
        constructor(radius: number, param: any);
        /**
         * Get/Set the radius.
         */
        radius: number;
        /**
         * Check whether it's BaseModelObject3D type or inherit from it.
         */
        isBaseModelObject3D: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The spot light object in scene.
     * @param param - The initial parameters.
     */
    class SpotLight extends THING.BaseShadowLight {
        constructor(param: any);
        /**
         * Get/Set distance.
         */
        distance: number;
        /**
         * Get/Set angle.
         */
        angle: number;
        /**
         * Get/Set penumbra.
         */
        penumbra: number;
        /**
         * Get/Set decay.
         */
        decay: number;
        /**
         * Enable/Disable shadow.
         */
        enableShadow: boolean;
        /**
         * Enable/Disable cast shadow.
         */
        castShadow: boolean;
        /**
         * Get/Set shadow quality.
         */
        shadowQuality: ShadowQualityType | number;
        /**
         * Get/Set shadow bias.
         */
        shadowBias: number;
        /**
         * Get/Set shadow range.
         */
        shadowRange: ShadowRangeInfo;
        /**
         * Get/Set color.
         */
        color: number | string | Number[];
        /**
         * Get/Set intensity.
         */
        intensity: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The water object in scene.
     * @param param - The initial parameters.
     */
    class Water extends THING.BasePlanePoints {
        constructor(param: any);
        /**
         * Get/Set flow speed.
         */
        flowSpeed: Number[];
        /**
         * Get/Set flow weight.
         */
        flowWeight: number;
        /**
         * Get/Set reflect distortion.
         */
        reflectDistortion: number;
        /**
         * Get/Set noise time scale.
         */
        noiseTimeScale: number;
        /**
         * Get/Set the holes in world space.
         */
        holes: Number[][][];
        /**
         * Get the area.
         */
        area: number;
        /**
         * Get the perimeter.
         */
        perimeter: number;
        /**
         * Get the label position in world space.
         */
        labelPosition: Number[];
        /**
         * Get the outline points in plane.
         */
        outlinePoints: Number[][];
        /**
         * Check whether it's BaseDynamicPoints type or inherit from it.
         */
        isBaseDynamicPoints: boolean;
        /**
         * Clear all points.
         */
        clearPoints(): void;
        /**
         * Insert point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        insertPoint(index: number, position: Number[]): void;
        /**
         * Add point in world space.
         * @param position - The world position.
         */
        addPoint(position: Number[]): void;
        /**
         * Add points in world space.
         * @param points - The points in world space.
         */
        addPoints(points: Number[][]): void;
        /**
         * Remove point by index.
         * @param index - The index.
         */
        removePoint(index: number): void;
        /**
         * Set the point by index in world space.
         * @param index - The index.
         * @param position - The world position.
         */
        setPoint(index: number, position: Number[]): void;
        /**
         * Get the number of points.
         */
        number: number;
        /**
         * Get/Set the auto adjust position flag, default is false.
        If the relative position of point(s) is too large, there will be a problem of precision loss (object drawing will shake).
         */
        autoAdjustPosition: boolean;
        /**
         * Get/Set the points in self space.
         */
        selfPoints: Number[][];
        /**
         * Get/Set the points in world space.
         */
        points: Number[][];
        /**
         * Get/Set the points in local space.
         */
        localPoints: Number[][];
        /**
         * Get the length of points.
         */
        length: number;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The web view object that can show it as renderable plane in scene.
     * @param param - The initial parameters.
     */
    class WebView extends THING.Object3D {
        constructor(param: any);
        /**
         * Get/Set the render type.
         */
        renderType: RenderType;
        /**
         * Get/Set url.
         */
        url: string;
        /**
         * Get/Set DOM width in pixel.
         */
        domWidth: number;
        /**
         * Get/Set DOM height in pixel.
         */
        domHeight: number;
        /**
         * Get/Set DOM scale(factor).
         * @example
         * // Keep ratio of size
            webView.domScale = 0.01;
            // Just set width and height without keeping ratio of size
            webView.domScale = [2, 3];
         */
        domScale: number | Number[];
        /**
         * Enable/Disable interactive.
         */
        interactive: boolean;
        /**
         * Get/Set name.
         * @example
         * object.name = 'MyObject';
         */
        name: string;
        /**
         * Get/Set tags.
         * @example
         * // Get tags
            let tags = object.tags;
         console.log(tags);
        
         // Set tags by array
         object.tags = ['one','two','three'];
        
         // Set tags by set
         object.tags = new Set(['one','two','three']);
         */
        tags: Set<String>;
        /**
         * Get/Set layer mask, it would use AND operator to test with camera's layer mask.
        If it's equals to 0 then indicates it can not render in this camera.
        The default value is 1.
        It CAN NOT work with instanced drawing mode for now.
         * @example
         * // Hide object by changing layer mask
        object.layerMask = 0;
         */
        layerMask: number;
        /**
         * Get visible state.
         * @example
         * let visible = object.getVisible();
            if (visible) {
                console.log('object is showing');
            }
         */
        getVisible(): boolean;
        /**
         * Set visible state.
         * @example
         * // Hide object self only, exclude all children
            object.setVisible(false, false);
        
            // Hide object(s) but exclude children what name equals to 'stone'
            object.setVisible(false, (obj) => {
                if (obj.name == 'stone') {
                    return false;
                }
            });
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - If it's boolean value type then means whether process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean | ProcessObjectCallback): void;
        /**
         * Get the inherit.
         * @example
         * object.inherit.style = THING.InheritType.Jump;
            object.inherit.visible = THING.InheritType.Break;
            object.inherit.pickable = THING.InheritType.Stop;
         */
        inherit: InheritData;
        /**
         * Get/Set visible state.
         * @example
         * let visible = object.visible;
            if (visible) {
                console.log('object is showing');
            }
         */
        visible: boolean;
        /**
         * Get/Set the pickable state.
         * @example
         * let pickable = object.pickable;
            if (pickable) {
                console.log('object is pickable');
            }
         */
        pickable: boolean;
        /**
         * Get the distance to world position.
         * @example
         * let distance = object.distanceTo([0, 10, 0]);
            if (distance > 5000) {
                console.log('object is so far from specified position');
            }
         * @param target - The target object or world position.
         */
        distanceTo(target: THING.Object3D | Number[]): number;
        /**
         * Keep object's size in screen(auto adjust object's scale).
         * @example
         * let keepSize = object.keepSize;
            if (keepSize) {
                console.log('object is keep size to render');
            }
         */
        keepSize: boolean;
        /**
         * Get/Set pivot in self oriented box from [left, bottom, back].
         * @example
         * // Make object origin to [right, top, front] position
            object.pivot = [1, 1, 1];
         */
        pivot: Number[];
        /**
         * Add object as child.
         * @example
         * // Keep local transform of box to be added to object
            object.add(new THING.Box({ localPosition: [0, 10, 0]}), { attachMode: false });
         * @param object - The object what you want to add.
         * @param options - The options.
         * @param options.subNodeName - The sub node name.
         * @param options.localPosition - The local position of parent or sub node.
         * @param [options.attachMode = true] - True indicates to keep world transform.
         * @param [options.ignoreScale = false] - True indicates ignore scale when add it as child.
         */
        add(object: THING.BaseObject, options: {
            subNodeName: string;
            localPosition: Number[];
            attachMode?: boolean;
            ignoreScale?: boolean;
        }): boolean;
        /**
         * Promote node as child object.
         * @example
         * // Promote all sub nodes
            var nodeNames = entity.body.nodeNames;
            nodeNames.forEach(name => {
                entity.promoteNode(name);
            });
         * @param name - The node name.
         * @param parent - The parent object, if it's null then indicates use current object as parent.
         */
        promoteNode(name: string, parent: THING.Object3D): THING.Object3D;
        /**
         * Get/Set style.
         * @example
         * let style = object.style;
            style.color = 'red';
            style.opacity = 0.1;
         */
        style: THING.Style;
        /**
         * Copy from object (except UUID attribute and parent).
        It would reload resource.
         * @example
         * // Copy the object from query result
            let sourceObject = app.query('#master')[0];
            if (sourceObject) {
                object.copy(sourceObject);
            }
         * @param object - The source object.
         */
        copy(object: THING.BaseObject): Promise<any>;
        /**
         * Clone.
         * @example
         * // Clone the object and move up
            let otherObject = object.clone();
            otherObject.translateY(10);
         * @param recursive - True indicates to load all children resources.
         * @param parent - The parent object, default is app root object.
         */
        clone(recursive: boolean, parent: THING.BaseObject): THING.Object3D;
        /**
         * Wait for object load completed.
         * @example
         * // Wait for object load completed then watch it
            await object.waitForComplete();
            app.camera.fit(object);
         */
        waitForComplete(): Promise<any>;
        /**
         * Load resource.
         * @example
         * // Wait the object to load resource completed
            await object.loadResource();
         * @param [recursive = true] - True indicates to load all children resources.
         * @param [options = {}] - The load options.
         */
        loadResource(recursive?: boolean, options?: any): Promise<any>;
        /**
         * Unload resource.
         * @example
         * // Wait the object to unload resource completed
            await object.unloadResource();
         * @param [recursive = true] - True indicates to unload all children resources.
         */
        unloadResource(recursive?: boolean): Promise<any>;
        /**
         * Get the body object.
         */
        body: THING.BodyObject;
        /**
         * Enable/Disable always on top.
         * @example
         * // Keep object render as the top of render layer
        object.alwaysOnTop = true;
         */
        alwaysOnTop: boolean;
        /**
         * Make object in instanced drawing mode.
         * @example
         * // Make object render in instanced drawing mode
            if (object.makeInstancedDrawing()) {
                console.log('Enable instanced drawing');
            }
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         * @param [options.renderMode = 'InstancedRendering'] - The render mode(could be 'SharedRendering/InstancedRendering').
         */
        makeInstancedDrawing(value: boolean, options: {
            renderMode?: string;
        }): boolean;
        /**
         * Get bounding box recursively.
         * @example
         * let boundingBox = object.boundingBox;
            if (boundingBox.halfSize[1] > 100) {
                console.log('The object is so tall');
            }
         */
        boundingBox: THING.Box3;
        /**
         * Get oriented box recursively.
         * @example
         * let orientedBox = object.orientedBox;
            if (orientedBox.angles[1] > 0) {
                console.log('The object has rotated by Y-axis');
            }
         */
        orientedBox: OrientedBoxResult;
        /**
         * Stop moving.
         * @example
         * object.stopMoving();
         */
        stopMoving(): void;
        /**
         * Pause moving.
         * @example
         * object.pauseMoving();
         */
        pauseMoving(): void;
        /**
         * Resume moving.
         * @example
         * object.resumeMoving();
         */
        resumeMoving(): void;
        /**
         * Move object in duration.
         * @example
         * object.moveTo(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                loopType: THING.LoopType.PingPong,
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveTo(value: Number[], param: MovePathLerpArgs): void;
        /**
         * Move object in duration (async).
         * @example
         * await object.moveToAsync(object.selfToWorld(THING.Math.randomVector([-200, -5, -200], [200, 5, 200])), {
                duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The position.
         * @param param - The parameters.
         */
        moveToAsync(value: Number[], param: MovePathLerpArgs): Promise<any>;
        /**
         * Move object with path in duration.
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        object.movePath(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000,
            loopType: THING.LoopType.Repeat,
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePath(value: Number[][], param: MovePathLerpArgs): void;
        /**
         * Move object with path in duration (async).
         * @example
         * let path = [
            [100, 0, 0],
            [100, 0, 100],
            [0, 0, 100],
        [0, 0, 0],
        ];
        
        await object.movePathAsync(path.map(point => object.selfToWorld(point)), {
            duration: 5 * 1000
        });
         * @param value - The path of position.
         * @param param - The parameters.
         */
        movePathAsync(value: Number[][], param: MovePathLerpArgs): Promise<any>;
        /**
         * Stop scaling.
         * @example
         * object.stopScaling();
         */
        stopScaling(): void;
        /**
         * Pause scaling.
         * @example
         * object.pauseScaling();
         */
        pauseScaling(): void;
        /**
         * Resume scaling.
         * @example
         * object.resumeScaling();
         */
        resumeScaling(): void;
        /**
         * Scale object in duration.
         * @example
         * object.scaleTo(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            loopType: THING.LoopType.PingPong,
            duration: THING.Math.randomInt(1000, 5000)
        });
         * @param value - The scale.
         * @param param - The parameters.
         */
        scaleTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Scale object in duration (async).
         * @example
         * await object.scaleToAsync(THING.Math.randomVector([1, 1, 1], [3, 3, 3]), {
            duration: THING.Math.randomInt(1000, 5000)
        });
         */
        scaleToAsync(): void;
        /**
         * Stop rotating.
         * @example
         * object.stopRotating();
         */
        stopRotating(): void;
        /**
         * Pause rotating.
         * @example
         * object.pauseRotating();
         */
        pauseRotating(): void;
        /**
         * Resume rotating.
         * @example
         * object.resumeRotating();
         */
        resumeRotating(): void;
        /**
         * Rotate object in duration.
         * @example
         * object.rotateTo([0, 360, 0], {
            loopType: THING.LoopType.Repeat,
            duration: 10 * 1000
        });
         * @param value - The angles.
         * @param param - The parameters.
         */
        rotateTo(value: Number[], param: LerpWithSpaceTypeArgs): void;
        /**
         * Rotate object in duration (async).
         * @example
         * await object.rotateToAsync([0, 360, 0], {
            duration: 10 * 1000
        });
         */
        rotateToAsync(): void;
        /**
         * Stop flying.
         * @example
         * object.stopFlying();
         */
        stopFlying(): void;
        /**
         * Pause flying.
         * @example
         * object.pauseFlying();
         */
        pauseFlying(): void;
        /**
         * Resume flying.
         * @example
         * object.resumeFlying();
         */
        resumeFlying(): void;
        /**
         * Fly to specified position in duration.
         * @example
         * object.flyTo({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyTo(param: THING.BaseObject | LerpFlyToArgs): void;
        /**
         * Fly to specified position in duration (async).
         * @example
         * await object.flyToAsync({
                target: otherTarget,
                horzAngle: 0,
                vertAngle: 45
            });
         * @param param - The object or parameters.
         */
        flyToAsync(param: THING.BaseObject | LerpFlyToArgs): Promise<any>;
        /**
         * Auto set it to best position of object.
         * @example
         * THING.App.current.camera.fit(otherTarget);
         * @param param - The parameters.
         * @param param.target - The target object.
         */
        fit(param: {
            target: THING.BaseObject;
        }): void;
        /**
         * Stop UV transform.
         * @example
         * object.stopUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        stopUVTransform(slotType: ImageSlotType): void;
        /**
         * Pause UV transform.
         * @example
         * object.pauseUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        pauseUVTransform(slotType: ImageSlotType): void;
        /**
         * Resume UV transform.
         * @example
         * object.resumeUVTransform(THING.ImageSlotType.Map);
         * @param slotType - The slot type of style.
         */
        resumeUVTransform(slotType: ImageSlotType): void;
        /**
         * Start UV transform in duration.
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode
        object.uvTransformTo(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformTo(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): void;
        /**
         * Start UV transform in duration (async).
         * @example
         * // Lerp UV offset from [0, 0] to [-1, 0] in 2 seconds by repeat mode and wait for complete
        await object.uvTransformToAsync(THING.ImageSlotType.Map, {
            from: { offset: [0, 0] },
            to: { offset: [-1, 0] },
            duration: 2000,
            loopType: THING.LoopType.Repeat,
            times: 3
        });
         * @param slotType - The slot type of style.
         * @param value - The UV transform info.
         * @param param? - The parameters.
         */
        uvTransformToAsync(slotType: ImageSlotType, value: StyleUVMatrixResult | LerpArgs, param?: LerpArgs): Promise<any>;
        /**
         * Get/Set local(offset) position of the parent space.
         */
        localPosition: Number[];
        /**
         * Get/Set angles of the inertial space.
         */
        localAngles: Number[];
        /**
         * Get/Set quaternion of the inertial space.
         */
        localQuaternion: Number[];
        /**
         * Get/Set scale of the self coordinate system.
         */
        localScale: Number[];
        /**
         * Get/Set world position of the world space.
         */
        position: Number[];
        /**
         * Get/Set angles of the world space.
         */
        angles: Number[];
        /**
         * Get/Set quaternion of the world space.
         */
        quaternion: Number[];
        /**
         * Get/Set scale of the world coordinate system.
         */
        scale: Number[];
        /**
         * Convert world position to self position.
         * @param position - The world position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        worldToSelf(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Convert self position to world position.
         * @param position - The self position.
         * @param [ignoreScale = false] - True indicates ignore scale factor.
         */
        selfToWorld(position: Number[], ignoreScale?: boolean): Number[];
        /**
         * Check whether has attribute.
         * @example
         * object.userData['power'] = 100;
        if (object.hasAttribute('userData/power')) {
            console.log('Object has power attribute in user data');
        }
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        hasAttribute(name: string): boolean;
        /**
         * Get attribute value.
         * @example
         * object.userData['power'] = 100;
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 100)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         */
        getAttribute(name: string): any;
        /**
         * Set attribute value.
         * @example
         * object.setAttribute('userData/power', 200);
        let power = object.getAttribute('userData/power');
        console.log(power);
        // @expect(power == 200)
         * @param name - The attribute name, it can use like 'a/b/c' to access attribute.
         * @param value - The attribute value.
         */
        setAttribute(name: string, value: any): void;
        /**
         * Set attribute values.
         * @example
         * object.setAttributes({
          "userData/name": 'Mr.Door',
          "userData/age": 18
        })
         * @param attributes - The attribute values.
         * @param [overwrite = true] - True indicates overwrite attribute.
         */
        setAttributes(attributes: any, overwrite?: boolean): void;
        /**
         * Get application.
         * @example
         * let app = object.app;
        console.log(app.isApp);
         */
        app: THING.App;
        /**
         * Get type.
         * @example
         * let type = object.type;
        console.log(type);
         */
        type: string;
        /**
         * Get/Set id.
         * @example
         * object.id = 'DEVICE_007';
        console.log(object.id);
         */
        id: string;
        /**
         * Get/Set uuid.
         * @example
         * object.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set user data.
         * @example
         * object.userData['Notebook'] = {
            name: 'FlyingCar',
            price: 100
        };
        console.log(object.userData['Notebook']);
         */
        userData: any;
        /**
         * Destroy.
         */
        destroy(): boolean;
        /**
         * Enable/Disable queryable.
         * @example
         * object.queryable = false;
            object.name = 'Hidden';
            // The object can not query due to queryable is false
            console.log(app.query('Hidden'));
         */
        queryable: boolean;
        /**
         * Register event.
         * @example
         * // Register object 'click' event listener
        object.on('click', function(ev){
            console.log('click', ev.object);
        }, 'MyClick');
        
        // Register object 'click' event listener with condition
        object.on('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first).
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register event what just trigger once time.
         * @example
         * // Register object 'click' event listener just one time
        object.once('click', function(){
            console.log('click');
        }, 'MyClick');
        
        // Register object 'click' event listener with condition just one time
        object.once('click', '.Box', function(ev){
            console.log('click box', ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param callback? - The callback function.
         * @param tag? - The event tag.
         * @param priority? - The priority value(default is 0, higher value will be processed first).
         * @param options? - The options.
         */
        once(type: string, condition?: string, callback?: (...params: any[]) => any, tag?: string, priority?: number, options?: ObjectEventOptions): void;
        /**
         * Unregister event.
         * @example
         * // Unregister object 'click' event listener by tag name
        object.off('click', 'MyClick');
         * @param type - The event type.
         * @param condition? - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition?: string, tag: string): void;
        /**
         * Pause event.
         * @example
         * // Pause object 'click' event listener
        object.pauseEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume event.
         * @example
         * // Resume object 'click' event listener
        object.resumeEvent('click', null, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger event.
         * @example
         * // Trigger object 'click' event listener
        object.trigger('click');
         * @param type - The event type.
         * @param ev - The event info.
         * @param options? - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options?: any): any;
        /**
         * Remove child object.
         * @example
         * object.remove(child);
         * @param object - The object what you want to remove.
         */
        remove(object: THING.BaseObject): boolean;
        /**
         * Traverse self and all children.
         * @example
         * object.traverse((child) => {
                console.log(child);
            });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * object.traverseBranch((child)=>{
            if(child.children.length){
                   return false;
               }
               return true;
        });
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Get/Set parent.
         * @example
         * console.log(object.parent);
         */
        parent: THING.BaseObject;
        /**
         * Get/Set relationships.
         * @example
         * console.log(object.relationships);
         */
        relationships: THING.Relationship[];
        /**
         * Get children.
         * @example
         * let children = object.children.query('[userData/power>100]');
            console.log(children);
         */
        children: THING.Selector;
        /**
         * Query children by condition.
         * @example
         * let result = object.query('[userData/power>100]');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options? - The options.
         */
        query(condition: string, options?: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let result = object.queryByName('box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let result = object.queryByReg(/Sphere/);
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by tag.
         * @example
         * let result = object.queryByTags('entity');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByTags(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by uuid.
         * @example
         * let result = object.queryByUUID('0');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByUUID(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by id.
         * @example
         * let result = object.queryById('1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryById(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by type.
         * @example
         * let result = object.queryByType('Box');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByType(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let result = object.queryByData('test=1');
            console.log(result);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: ObjectQueryOptions): THING.Selector;
        /**
         * Add component.
         * @example
         * object.addComponent(new MyComponent(), 'myComponent');
         * @param component - The component class or component object.
         * @param name - The name.
         * @param args? - The initial arguments to create component.
         */
        addComponent(component: THING.BaseComponent | any, name: string, args?: any): boolean;
        /**
         * Remove component.
         * @example
         * object.removeComponent('myComponent');
         * @param name - The name.
         */
        removeComponent(name: string): void;
        /**
         * Remove all components.
         * @example
         * object.removeAllComponents();
         */
        removeAllComponents(): void;
        /**
         * Traverse component by type.
         * @example
         * object.traverseComponentByType(THING.BaseComponent, (component, name) => {
                console.log(component, name);
            });
         * @param type - The component type.
         * @param callback - The callback function.
         */
        traverseComponentByType(type: any, callback: TraverseComponentByTypeCallback): void;
        /**
         * Get component by name.
         * @example
         * let component = object.getComponentByName('myComponent');
         * @param name - The name.
         */
        getComponentByName(name: string): THING.BaseComponent;
        /**
         * Get components by type.
         * @example
         * let components = object.getComponentsByType(THING.BaseComponent);
         * @param type - The component type.
         */
        getComponentsByType(type: any): THING.BaseComponent[];
        /**
         * Get all components(it would create all registered components).
         * @example
         * let components = object.getAllComponents();
         */
        getAllComponents(): THING.BaseComponent[];
        /**
         * Check whether has component.
         * @example
         * if (object.hasComponent('myComponent')) {
                console.log('found it');
            }
         * @param name - The name.
         */
        hasComponent(name: string): boolean;
        /**
         * Get all components.
         * @example
         * let components = object.components;
            console.log(components);
         */
        readonly components: Map<String, THING.BaseComponent>;
    }
    /**
     * The parser of objects scene in layout mode.
     */
    class SceneLayoutParser {
    }
    /**
     * The parser of objects scene in tree mode.
     */
    class SceneObjectParser {
    }
    /**
     * The relationship between objects.
     * @param param.type - The relationship type.
     * @param param.name - The relationship name.
     * @param param.source - The source object(s) of relation.
     * @param param.target - The target object(s) of relation.
     * @param [param.queryDirection] - The default query relationship direction.
     */
    class Relationship {
        constructor(param: {
            type: string;
            name: string;
            source: THING.BaseObject | THING.BaseObject[] | THING.Selector;
            target: THING.BaseObject | THING.BaseObject[] | THING.Selector;
            queryDirection?: string;
        });
        /**
         * destroy relationship
         * @example
         * let rel = app.queryRelationships({type: "control"})[0];
        rel.destroy();
         */
        destroy(): void;
        /**
         * Get/Set the relationship type.
         */
        type: string;
        /**
         * Get/Set the relationship name.
         */
        name: string;
        /**
         * Get/Set uuid.
         * @example
         * relationship.uuid = THING.Math.generateUUID();
        console.log(object.uuid);
         */
        uuid: string;
        /**
         * Get/Set the relationship source object.
         */
        source: THING.BaseObject | THING.BaseObject[] | THING.Selector;
        /**
         * Get/Set the relationship target.
         */
        target: THING.BaseObject | THING.BaseObject[] | THING.Selector;
        /**
         * Get/Set the relationship default query direction.
         */
        queryDirection: RelationshipDirection;
    }
    /**
     * The renderer to draw on canvas.
     * @param param - The initial parameters.
     */
    class CanvasRenderer {
        constructor(param: any);
    }
    /**
     * The image texture that load image resource and use by style.
     * @param param - The initial parameters.
     */
    class BaseImageTexture extends THING.BaseTexture {
        constructor(param: any);
        /**
         * Get/Set url.
         */
        url: string;
        /**
         * Get/Set the color format.
         */
        colorFormat: number;
        /**
         * Get/Set the anisotropy.
         */
        anisotropy: number;
        /**
         * Get/Set the wrapping behavior for the S texture coordinate.
         */
        wrapTypeS: ImageWrapType;
        /**
         * Get/Set the wrapping behavior for the T texture coordinate.
         */
        wrapTypeT: ImageWrapType;
        /**
         * Get/Set the wrapping behavior for the both S and T texture coordinates.
         */
        wrapType: ImageWrapType;
        /**
         * Get/Set the mappingType type.
         */
        mappingType: ImageMappingType;
        /**
         * Get/Set the min filter type.
         */
        minFilterType: ImageFilterType;
        /**
         * Get/Set the mag filter type.
         */
        magFilterType: ImageFilterType;
        /**
         * Enable/Disable flipY.
         */
        flipY: boolean;
        /**
         * Enable/Disable premultiply alpha.
         */
        premultiplyAlpha: boolean;
        /**
         * Enable/Disable generate mipmaps.
         */
        generateMipmaps: boolean;
        /**
         * Wait for object load completed.
         */
        waitForComplete(): Promise<any>;
        /**
         * Check whether it's already disposed.
         */
        disposed: boolean;
        /**
         * Get the unique ID.
         */
        uuid: string;
        /**
         * Get the loaded flag.
         */
        loaded: boolean;
    }
    /**
     * BaseResource
    The base resource.
     */
    class BaseResource {
        /**
         * Wait for object load completed.
         */
        waitForComplete(): Promise<any>;
        /**
         * Check whether it's already disposed.
         */
        disposed: boolean;
        /**
         * Get the unique ID.
         */
        uuid: string;
        /**
         * Get the loaded flag.
         */
        loaded: boolean;
    }
    /**
     * The base static texture means we can not change any attributes of it in runtime(only use the initial attributes).
     * @param param - The initial parameters.
     */
    class BaseStaticTexture {
        constructor(param: any);
        /**
         * Get the color format.
         */
        colorFormat: number;
        /**
         * Get the anisotropy.
         */
        anisotropy: number;
        /**
         * Get the wrap type.
         */
        wrapType: ImageWrapType;
        /**
         * Get the mappingType type.
         */
        mappingType: ImageMappingType;
        /**
         * Get the min filter type.
         */
        minFilterType: ImageFilterType;
        /**
         * Get the mag filter type.
         */
        magFilterType: ImageFilterType;
        /**
         * Get flipY.
         */
        flipY: boolean;
        /**
         * Get premultiply alpha.
         */
        premultiplyAlpha: boolean;
        /**
         * Check generate mipmaps.
         */
        generateMipmaps: boolean;
        /**
         * Check class type.
         */
        isBaseStaticTexture: boolean;
    }
    /**
     * BaseTexture
    The base texture resource.
     */
    class BaseTexture extends THING.BaseResource {
        /**
         * Copy texture.
         * @param source - The texture.
         */
        copy(source: THING.BaseTexture): THING.BaseTexture;
        /**
         * Get/Set the color format.
         */
        colorFormat: number;
        /**
         * Get/Set the anisotropy.
         */
        anisotropy: number;
        /**
         * Get/Set the wrapping behavior for the S texture coordinate.
         */
        wrapTypeS: ImageWrapType;
        /**
         * Get/Set the wrapping behavior for the T texture coordinate.
         */
        wrapTypeT: ImageWrapType;
        /**
         * Get/Set the wrapping behavior for the both S and T texture coordinates.
         */
        wrapType: ImageWrapType;
        /**
         * Get/Set the mappingType type.
         */
        mappingType: ImageMappingType;
        /**
         * Get/Set the min filter type.
         */
        minFilterType: ImageFilterType;
        /**
         * Get/Set the mag filter type.
         */
        magFilterType: ImageFilterType;
        /**
         * Enable/Disable flipY.
         */
        flipY: boolean;
        /**
         * Enable/Disable premultiply alpha.
         */
        premultiplyAlpha: boolean;
        /**
         * Enable/Disable generate mipmaps.
         */
        generateMipmaps: boolean;
        /**
         * Wait for object load completed.
         */
        waitForComplete(): Promise<any>;
        /**
         * Check whether it's already disposed.
         */
        disposed: boolean;
        /**
         * Get the unique ID.
         */
        uuid: string;
        /**
         * Get the loaded flag.
         */
        loaded: boolean;
    }
    /**
     * The cube texture that load image resource and use by style.
     * @example
     * // Create cube texture from cube map images
    let cubeTexture = new THING.CubeTexture([
        './skyboxes/bluesky/posx.jpg', './skyboxes/bluesky/negx.jpg',
        './skyboxes/bluesky/posy.jpg', './skyboxes/bluesky/negy.jpg',
        './skyboxes/bluesky/posz.jpg', './skyboxes/bluesky/negz.jpg'
    ]);
    
    // Create cube texture
    let cubeTexture = new THING.CubeTexture({
        url:{
            negx: './images/Night/negx.jpg', // 左
            negy: './images/Night/negy.jpg', // 下
            negz: './images/Night/negz.jpg', // 前
            posx: './images/Night/posx.jpg', // 右
            posy: './images/Night/posy.jpg', // 上
            posz: './images/Night/posz.jpg'  // 后
        }
    });
    
    // Create cube texture from folder path
    let cubeTexture = new THING.CubeTexture({
        url: './images/Night/'
    }};
     * @param param - The initial parameters.
     */
    class CubeTexture extends THING.BaseImageTexture {
        constructor(param: any);
        /**
         * Check class type.
         * @example
         * if (texture.isCubeTexture) {
                console.log(`It's cube texture`);
            }
         */
        isCubeTexture: boolean;
        /**
         * Get/Set url.
         */
        url: string;
        /**
         * Get/Set the color format.
         */
        colorFormat: number;
        /**
         * Get/Set the anisotropy.
         */
        anisotropy: number;
        /**
         * Get/Set the wrapping behavior for the S texture coordinate.
         */
        wrapTypeS: ImageWrapType;
        /**
         * Get/Set the wrapping behavior for the T texture coordinate.
         */
        wrapTypeT: ImageWrapType;
        /**
         * Get/Set the wrapping behavior for the both S and T texture coordinates.
         */
        wrapType: ImageWrapType;
        /**
         * Get/Set the mappingType type.
         */
        mappingType: ImageMappingType;
        /**
         * Get/Set the min filter type.
         */
        minFilterType: ImageFilterType;
        /**
         * Get/Set the mag filter type.
         */
        magFilterType: ImageFilterType;
        /**
         * Enable/Disable flipY.
         */
        flipY: boolean;
        /**
         * Enable/Disable premultiply alpha.
         */
        premultiplyAlpha: boolean;
        /**
         * Enable/Disable generate mipmaps.
         */
        generateMipmaps: boolean;
        /**
         * Wait for object load completed.
         */
        waitForComplete(): Promise<any>;
        /**
         * Check whether it's already disposed.
         */
        disposed: boolean;
        /**
         * Get the unique ID.
         */
        uuid: string;
        /**
         * Get the loaded flag.
         */
        loaded: boolean;
    }
    /**
     * EmptyTexture
    The empty texture resource.
     */
    class EmptyTexture extends THING.BaseTexture {
        /**
         * Check class type.
         */
        isEmptyTexture: boolean;
        /**
         * Copy texture.
         * @param source - The texture.
         */
        copy(source: THING.BaseTexture): THING.BaseTexture;
        /**
         * Get/Set the color format.
         */
        colorFormat: number;
        /**
         * Get/Set the anisotropy.
         */
        anisotropy: number;
        /**
         * Get/Set the wrapping behavior for the S texture coordinate.
         */
        wrapTypeS: ImageWrapType;
        /**
         * Get/Set the wrapping behavior for the T texture coordinate.
         */
        wrapTypeT: ImageWrapType;
        /**
         * Get/Set the wrapping behavior for the both S and T texture coordinates.
         */
        wrapType: ImageWrapType;
        /**
         * Get/Set the mappingType type.
         */
        mappingType: ImageMappingType;
        /**
         * Get/Set the min filter type.
         */
        minFilterType: ImageFilterType;
        /**
         * Get/Set the mag filter type.
         */
        magFilterType: ImageFilterType;
        /**
         * Enable/Disable flipY.
         */
        flipY: boolean;
        /**
         * Enable/Disable premultiply alpha.
         */
        premultiplyAlpha: boolean;
        /**
         * Enable/Disable generate mipmaps.
         */
        generateMipmaps: boolean;
        /**
         * Wait for object load completed.
         */
        waitForComplete(): Promise<any>;
        /**
         * Check whether it's already disposed.
         */
        disposed: boolean;
        /**
         * Get the unique ID.
         */
        uuid: string;
        /**
         * Get the loaded flag.
         */
        loaded: boolean;
    }
    /**
     * The geometry resource to build custom geometry info in scene.
     * @param param - The initial parameters.
     */
    class GeometryResource {
        constructor(param: any);
        /**
         * Get vertex data.
         */
        vertexData: any;
        /**
         * Get resource.
         */
        resource: any;
        /**
         * Set position.
         */
        position: Number[];
        /**
         * Set uv.
         */
        uv: Number[];
        /**
         * Set normal.
         */
        normal: Number[];
    }
    /**
     * The image texture that load image resource and use by style.
     * @example
     * // Create image texture from pixel buffer with size
    let imageTexture = new THING.ImageTexture({
        data: pixelBuffer,
        width: 128,
        height: 128
    });
    
    // Create image texture from canvas
    let imageTexture = new THING.ImageTexture({
        resource: canvas
    });
     * @param param - The initial parameters.
     */
    class ImageTexture extends THING.BaseImageTexture {
        constructor(param: any | PixelBuffer | CanvasResource);
        /**
         * Get source url or base64 data.
         */
        src: string;
        /**
         * Set the dirty flag.
         */
        dirty: boolean;
        /**
         * Get width in pixel.
         */
        width: number;
        /**
         * Get height in pixel.
         */
        height: number;
        /**
         * Enable/Disable flipY.
         */
        flipY: boolean;
        /**
         * Enable/Disable generate mipmaps.
         */
        generateMipmaps: boolean;
        /**
         * Check class type.
         */
        isImageTexture: boolean;
        /**
         * Get/Set url.
         */
        url: string;
        /**
         * Get/Set the color format.
         */
        colorFormat: number;
        /**
         * Get/Set the anisotropy.
         */
        anisotropy: number;
        /**
         * Get/Set the wrapping behavior for the S texture coordinate.
         */
        wrapTypeS: ImageWrapType;
        /**
         * Get/Set the wrapping behavior for the T texture coordinate.
         */
        wrapTypeT: ImageWrapType;
        /**
         * Get/Set the wrapping behavior for the both S and T texture coordinates.
         */
        wrapType: ImageWrapType;
        /**
         * Get/Set the mappingType type.
         */
        mappingType: ImageMappingType;
        /**
         * Get/Set the min filter type.
         */
        minFilterType: ImageFilterType;
        /**
         * Get/Set the mag filter type.
         */
        magFilterType: ImageFilterType;
        /**
         * Enable/Disable premultiply alpha.
         */
        premultiplyAlpha: boolean;
        /**
         * Wait for object load completed.
         */
        waitForComplete(): Promise<any>;
        /**
         * Check whether it's already disposed.
         */
        disposed: boolean;
        /**
         * Get the unique ID.
         */
        uuid: string;
        /**
         * Get the loaded flag.
         */
        loaded: boolean;
    }
    /**
     * The material resource to build custom geometry info in scene.
     * @param param - The initial parameters.
     */
    class MaterialResource extends THING.BaseResource {
        constructor(param: any);
        /**
         * Get the data.
         */
        data: any;
        /**
         * Wait for object load completed.
         */
        waitForComplete(): Promise<any>;
        /**
         * Check whether it's already disposed.
         */
        disposed: boolean;
        /**
         * Get the unique ID.
         */
        uuid: string;
        /**
         * Get the loaded flag.
         */
        loaded: boolean;
    }
    /**
     * RenderTexture
    The render texture resource.
     */
    class RenderTexture extends THING.BaseStaticTexture {
        /**
         * Copy from image.
         * @param source - The image.
         */
        copy(source: THING.RenderTexture): THING.RenderTexture;
        /**
         * Clone image.
         */
        clone(): THING.RenderTexture;
        /**
         * Download file as image resource in PNG file format.
         * @example
         * renderTexture.download('myScreenshot');
         * @param fileName - The file name.
         */
        download(fileName: string): void;
        /**
         * Get/Set size.
         */
        size: Number[];
        /**
         * Get pixel buffer in RGBA color format.
         */
        pixelBuffer: Uint8Array;
        /**
         * Check class type.
         */
        isRenderTexture: boolean;
        /**
         * Get the color format.
         */
        colorFormat: number;
        /**
         * Get the anisotropy.
         */
        anisotropy: number;
        /**
         * Get the wrap type.
         */
        wrapType: ImageWrapType;
        /**
         * Get the mappingType type.
         */
        mappingType: ImageMappingType;
        /**
         * Get the min filter type.
         */
        minFilterType: ImageFilterType;
        /**
         * Get the mag filter type.
         */
        magFilterType: ImageFilterType;
        /**
         * Get flipY.
         */
        flipY: boolean;
        /**
         * Get premultiply alpha.
         */
        premultiplyAlpha: boolean;
        /**
         * Check generate mipmaps.
         */
        generateMipmaps: boolean;
        /**
         * Check class type.
         */
        isBaseStaticTexture: boolean;
    }
    /**
     * The style modifier to clone or resume style when change its attributes.
     */
    class StyleModifier {
    }
    /**
     * The video texture what can play video stream and can be used by object's style.
     * @param param - The initial parameters.
     */
    class VideoTexture extends THING.BaseStaticTexture {
        constructor(param: any);
        /**
         * Copy from image.
         * @param source - The image.
         */
        copy(source: THING.VideoTexture): THING.VideoTexture;
        /**
         * Clone image.
         */
        clone(): THING.VideoTexture;
        /**
         * Get/Set url.
         */
        url: string;
        /**
         * Check class type.
         */
        isVideoTexture: boolean;
        /**
         * Get the color format.
         */
        colorFormat: number;
        /**
         * Get the anisotropy.
         */
        anisotropy: number;
        /**
         * Get the wrap type.
         */
        wrapType: ImageWrapType;
        /**
         * Get the mappingType type.
         */
        mappingType: ImageMappingType;
        /**
         * Get the min filter type.
         */
        minFilterType: ImageFilterType;
        /**
         * Get the mag filter type.
         */
        magFilterType: ImageFilterType;
        /**
         * Get flipY.
         */
        flipY: boolean;
        /**
         * Get premultiply alpha.
         */
        premultiplyAlpha: boolean;
        /**
         * Check generate mipmaps.
         */
        generateMipmaps: boolean;
        /**
         * Check class type.
         */
        isBaseStaticTexture: boolean;
    }
    /**
     * AsyncSelector
    The async selector.
     */
    class AsyncSelector {
    }
    /**
     * DynamicSelector
    The dynamic selector to find objects with some conditions.
     */
    class DynamicSelector {
        /**
         * Check class type.
         */
        isDynamicSelector: boolean;
    }
    /**
     * Selector
    The selector to find objects with some conditions.
     */
    class Selector {
        /**
         * Select objects by condition with object's queryable state.
         * @example
         * // Select entities from objects
        let entities = selector.select('.Entity', objects);
        console.log(entities);
         * @param condition - The conditions.
         * @param objects - The objects what to be queried.
         */
        select(condition: string, objects: object[]): object[];
        /**
         * Test the single object with some conditions (without object's queryable state).
         * @example
         * // Test whether object fit specified condition
        let result = selector.test('.Entity', object);
         * @param condition - The conditions.
         * @param object - The object what to be queried.
         */
        test(condition: string, object: THING.BaseObject): boolean;
        /**
         * Find objects with some conditions and store it in result.
         * @example
         * // Query/select objects by specified condition
        object.query('.Entity');
         * @param condition - The conditions.
         * @returns The reference of target or new selector.
         */
        query(condition: string): THING.Selector;
        /**
         * Query children by reg.
         * @example
         * let car = selector.queryByReg(/car/)
            console.log(car);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByReg(condition: string, options: any): THING.Selector;
        /**
         * Query children by tag.
         * @param condition - The condition to select objects.
         * @param options - The options.
         * @returns let car = selector.queryByTags('car')
            console.log(car);
         */
        queryByTags(condition: string, options: any): THING.Selector;
        /**
         * Query children by name.
         * @example
         * let car = selector.queryByName('car01')
            console.log(car);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByName(condition: string, options: any): THING.Selector;
        /**
         * Query children by uuid.
         * @param condition - The condition to select objects.
         * @param options - The options.
         * @returns let car = selector.queryByUUID('100')
            console.log(car);
         */
        queryByUUID(condition: string, options: any): THING.Selector;
        /**
         * Query children by id.
         * @param condition - The condition to select objects.
         * @param options - The options.
         * @returns let car = selector.queryById('1')
            console.log(car);
         */
        queryById(condition: string, options: any): THING.Selector;
        /**
         * Query children by type.
         * @param condition - The condition to select objects.
         * @param options - The options.
         * @returns let car = selector.queryByType('car')
            console.log(car);
         */
        queryByType(condition: string, options: any): THING.Selector;
        /**
         * Query children by userData.
         * @example
         * let car = selector.queryByData('test=1')
            console.log(car);
         * @param condition - The condition to select objects.
         * @param options - The options.
         */
        queryByData(condition: string, options: any): THING.Selector;
        /**
         * Find objects with some conditions and store it in result in async mode.
         * @example
         * // Query/select objects by specified condition from root object in async mode
        selector.queryAsync('.Entity', rootObject, true).then((result) => {
            console.log(result);
        });
         * @param condition - The conditions.
         * @param root - The root object.
         * @param recursive - True indicates query in recursive mode.
         */
        queryAsync(condition: string, root: THING.BaseObject, recursive: boolean): Promise<THING.Selector>;
        /**
         * Find objects with some conditions and returns the first one.
         * @param condition - The conditions.
         * @param objects - The objects what to be queried.
         */
        find(condition: string, objects: object[]): BaseObject;
        /**
         * Push object into it.
         * @example
         * // Push object into selector and feedback length after pushing object
        let length = selector.push(object);
        console.log(length);
         * @param object - The object what you want to push.
         * @returns The length of objects after push.
         */
        push(object: THING.BaseObject | THING.BaseObject[] | THING.Selector): number;
        /**
         * Add objects by selector and return new one with results.
         * @example
         * // Return new selector by adding selector/objects
        let objects = selector.add([obj1, obj2, obj3]);
        console.log(objects);
         * @param selector - The selector or object(s) to add.
         */
        add(selector: THING.Selector | THING.BaseObject[] | THING.BaseObject): THING.Selector;
        /**
         * Remove objects with some conditions and return new selector with results.
         * @example
         * // Return new selector by removing selector/objects
        let objects = selector.remove([obj1, obj2, obj3]);
        console.log(objects);
         * @param condition - The condition.
         */
        remove(condition: string): THING.Selector;
        /**
         * Remove objects with some conditions and return new selector with results.
         * @example
         * // Return new selector by removing selector/objects
        let objects = selector.not([obj1, obj2, obj3]);
        console.log(objects);
         * @param condition - The condition.
         */
        not(condition: string): THING.Selector;
        /**
         * Clear objects.
         * @example
         * // Clear all objects in selector
        selector.clear();
         */
        clear(): void;
        /**
         * Traverse objects.
         * @example
         * // Traverse all objects in selector
        selector.forEach((object) => {
            console.log(object);
        });
         * @param callback - The callback function(returns false indicates break it, otherwise continue to process it).
         */
        forEach(callback: OnTraverseObjectsInSelector): void;
        /**
         * Traverse objects in sync mode.
         * @example
         * // Objects fly one by one(it would wait for previous object fly to complete before start)
        selector.forEachSync(object => {
            return THING.App.current.camera.flyToAsync({
                target: object,
                duration: 1 * 1000,
                distance: 10,
                delayTime: THING.Math.randomFloat(0, 1000),
                complete: function (ev) {
                }
            });
        });
         * @param callback - The callback function(returns false indicates break it, otherwise continue to process it).
         */
        forEachSync(callback: OnTraverseObjectsInSelector): void;
        /**
         * Traverse self and all children.
         * @example
         * selector.traverse(object =>{
         console.log(object)
        });
         * @param callback - The callback function.
         */
        traverse(callback: (...params: any[]) => any): void;
        /**
         * Traverse self and all children. (Support for exit at traverse runtime)
         * @example
         * selector.traverseBranch(object =>{
         if(object.children.length){
           return false;
         }
         return true;
        })
         * @param callback - The callback function. (Return false to exit)
         */
        traverseBranch(callback: (...params: any[]) => any): void;
        /**
         * Traverse objects and return an new selector.
         * @example
         * // Returns all first child object of each objects
        let objects = selector.map((object) => {
            return object.children[0];
        });
         * @param callback - The callback function.
         */
        map(callback: OnMapObjectsInSelector): THING.Selector;
        /**
         * Executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element.
        The final result of running the reducer across all elements of the array is a single value.
         * @example
         * // Get avg height of entities
        let entities = app.query('.Entity');
        let height = entities.reduce((value, entity) => {
            return value + entity.position[1];
        }, 0) / entities.length;
         * @param callback - The callback function.
         * @param initialValue - The initial number.
         */
        reduce(callback: OnReduceObjectsInSelector, initialValue: number): number;
        /**
         * Return elements in range.
         * @example
         * // Returns [1, 4] range of objects
        let objects1 = selector.slice(1, 4);
        
        // Returns [1, ...] range of objects
        let objects2 = selector.slice(1);
         * @param start - The start index.
         * @param end? - The end index.
         */
        slice(start: number, end?: number): THING.Selector;
        /**
         * Filter.
         * @example
         * // Filter objects with name
        let objects = selector.filter((object) => {
            return !!object.name;
        });
         * @param callback - The callback function.
         */
        filter(callback: OnFilterObjectsInSelector): THING.Selector;
        /**
         * Sort objects from low to high by the result from callback function.
         * @example
         * // Sort objects by name
        selector.sort((obj1, obj2) => {
            return obj1.name.localeCompare(obj2.name);
        })
         * @param callback - The callback function to sort.
         */
        sort(callback: OnSortObjectsInSelector): THING.Selector;
        /**
         * Convert to array.
         * @example
         * // Get/Convert objects in array mode
        let objects = selector.objects;
        console.log(objects);
         */
        toArray(): THING.BaseObject[];
        /**
         * Check whether has/includes element.
         * @example
         * // Check whether includes specified object
        let exists = selector.includes(object);
         * @param object - The object.
         */
        includes(object: any): boolean;
        /**
         * Get the index of element in objects.
         * @example
         * // Get the index of object in selector
        let index = selector.indexOf(object);
         * @param object - The object.
         * @returns -1 indicates that specified object does not exist.
         */
        indexOf(object: any): number;
        /**
         * Remove objects.
         * @example
         * // Remove [1, 4] range of objects
        let removeObjects = selector.splice(1, 4);
         * @param index - The start index.
         * @param number - The number of objects what to remove.
         * @returns The removed objects.
         */
        splice(index: number, number: number): THING.Selector;
        /**
         * Insert object by index.
         * @example
         * // Insert objects at the front of selector
        selector.insert(0, [obj1, obj2]);
         * @param index - The index to insert.
         * @param object - The object to insert.
         */
        insert(index: number, object: THING.BaseObject): THING.Selector;
        /**
         * Remove object at index.
         * @example
         * // Remove the first object in selector.
        selector.remoteAt(0);
         * @param index - The index of object to remove.
         */
        removeAt(index: number): THING.Selector;
        /**
         * Swap objects by index.
         * @example
         * // Swap (index: 0) and (index:3) objects in selector
        selector.swap(0, 3);
         * @param index0 - The first index of objects.
         * @param index1 - The second index of objects.
         */
        swap(index0: number, index1: number): THING.Selector;
        /**
         * Combine array.
         * @example
         * // Concat other objects/selector and create new selector
        let newSelector = selector.concat([obj1, obj2]);
         * @param selector - The objects array or selector.
         */
        concat(selector: THING.Selector | THING.BaseObject[]): THING.Selector;
        /**
         * Reverse the objects.
         * @example
         * // Reverse objects in selector
        selector.reverse();
         */
        reverse(): THING.Selector;
        /**
         * Check whether has object or not.
         * @example
         * // Check whether has specified object
        let exists = selector.has(object);
         * @param object - The object.
         */
        has(object: any): boolean;
        /**
         * Check whether it's the same selector.
         * @example
         * let isSame = selector.equals([obj1, obj2]);
         * @param objects - The objects array or selector.
         */
        equals(objects: object[] | THING.Selector): boolean;
        /**
         * Get/Set the length of objects.
         * @example
         * let length = selector.length;
         */
        length: number;
        /**
         * Make objects in instanced drawing mode.
         * @example
         * // Enable objects instanced drawing
        selector.makeInstancedDrawing(true);
        
        // Disable objects instanced drawing
        selector.makeInstancedDrawing(false);
         * @param value - True indicates enable instanced drawing mode.
         * @param options - The options.
         */
        makeInstancedDrawing(value: boolean, options: any): void;
        /**
         * Get the instanced drawing objects.
         * @example
         * // Get the objects what has enabled instanced drawing
        let instancedDrawingObjects = selector.getInstancedDrawingObjects();
         */
        getInstancedDrawingObjects(): THING.BaseObject[];
        /**
         * Set visible state.
         * @example
         * // Set visible attribute of all objects in selector to true
        selector.setVisible(true);
        
        // Set visible attribute of all objects and its children in selector to true
        selector.setVisible(true, true);
         * @param value - True indicates show it, otherwise hide it.
         * @param [recursive = false] - True indicates process it with all children.
         */
        setVisible(value: boolean, recursive?: boolean): void;
        /**
         * Set all objects and its children visible state.
         * @example
         * // Set visible attribute of all objects and its children in selector to true
        selector.visible = true;
         */
        visible: boolean;
        /**
         * Set all objects and its children pickable state.
         * @example
         * // Set pickable attribute of all objects and its children in selector to true
        selector.pickable = true;
         */
        pickable: boolean;
        /**
         * Wait for all objects load completed.
         * @example
         * // Wait all objects load finished then print their name
        selector.waitForComplete().then((objects) => {
            objects.forEach(object => {
                console.log(object.name);
            });
        });
         */
        waitForComplete(): Promise<any>;
        /**
         * Wait for all objects sync action finished(would process objects one by one).
         * @example
         * // Load objects one by one
        selector.waitForEachSync(async (object) => {
            return object.loadResource();
        });
         * @param callback - The callback function.
         */
        waitForEachSync(callback: (...params: any[]) => any): Promise<any>;
        /**
         * Destroy all.
         * @example
         * selector.destroy();
         */
        destroy(): void;
        /**
         * Load resource.
         * @example
         * selector.loadResource();
         * @param options - The load options.
         */
        loadResource(options: any): void;
        /**
         * Unload resource.
         * @example
         * selector.unloadResource();
         */
        unloadResource(): void;
        /**
         * Register all objects event.
         * @example
         * // Register all entities with 'click' event listener
        selector.on('click', '.Entity', function(ev){
            console.log(ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first)
         * @param options - The options.
         */
        on(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Register all objects event what just trigger once time.
         * @example
         * // Register all entities with 'click' event listener in one time
        selector.once('click', '.Entity', function(ev){
            console.log(ev.object);
        }, 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param callback - The callback function.
         * @param tag - The event tag.
         * @param priority - The priority value(default is 0, higher value will be processed first)
         * @param options - The options.
         */
        once(type: string, condition: string, callback: (...params: any[]) => any, tag: string, priority: number, options: ObjectEventOptions): void;
        /**
         * Unregister all objects event.
         * @example
         * // Unregister all entities with 'click' event listener by tag name
        selector.off('click', '.Entity', 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        off(type: string, condition: string, tag: string): void;
        /**
         * Pause all objects event.
         * @example
         * // Pause all entities with 'click' event listener by tag name
        selector.pauseEvent('click', '.Entity', 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        pauseEvent(type: string, condition: string, tag: string): void;
        /**
         * Resume all objects event.
         * @example
         * // Resume all entities with 'click' event listener by tag name
        selector.resumeEvent('click', '.Entity', 'MyClick');
         * @param type - The event type.
         * @param condition - The condition to select objects.
         * @param tag - The event tag.
         */
        resumeEvent(type: string, condition: string, tag: string): void;
        /**
         * Trigger all objects event.
         * @example
         * // Trigger all entities with 'click' event listener by tag name
        selector.trigger('click', '.Entity', { text: 'Hello' });
         * @param type - The event type.
         * @param ev - The event info.
         * @param options - The options.
         * @param options.tag - The tag name.
         */
        trigger(type: string, ev: any, options: {
            tag: string;
        }): void;
        /**
         * Get the axis-aligned bounding box(AABB).
         * @example
         * // Get axis-aligned bounding box in world space of objects
        let boundingBox = selector.getBoundingBox();
        console.log(boundingBox);
         */
        getBoundingBox(): THING.Box3;
        /**
         * Check class type.
         */
        isSelector: boolean;
    }
}

/**
 * The action message data.
 * @property type - The action type.
 * @property target - The target to filer object what to process this action, if not provide then indicates use app's root as target object.
 * @property params - The parameters what pass to action.
 * @property delay - The delay to start performing the current action.
 * @property waitForComplete - Wait for the current action to complete before executing the next action, The default is false.
 */
declare type ActionMessageData = {
    type: string;
    target: string;
    params: any;
    delay: number;
    waitForComplete: boolean;
};

/**
 * @property minFilter - The min filter type.
 * @property magFilter - The mag filter type.
 * @property wrapS - The horz wrap type.
 * @property wrapT - The vert wrap type.
 */
declare type LoadTextureResourceSamplerInfo = {
    minFilter: ImageFilterType;
    magFilter: ImageFilterType;
    wrapS: ImageWrapType;
    wrapT: ImageWrapType;
};

/**
 * When create texture.
 * @param url - The url.
 * @param sampler - The sampler info.
 */
declare type onCreateTextureCallback = (url: string, sampler: LoadTextureResourceSamplerInfo) => THING.BaseTexture;

/**
 * When create texture in async mode.
 * @param url - The url.
 * @param sampler - The sampler info.
 */
declare type onCreateTextureAsyncCallback = (url: string, sampler: LoadTextureResourceSamplerInfo) => Promise<any>;

/**
 * The function to call when level changed.
 * @param ev - The event info.
 * @param ev.current - The current level.
 * @param ev.prev - The previous level.
 * @param ev.path - The path from start to target object.
 */
declare type LevelChangedCallback = (ev: {
    current: THING.BaseObject;
    prev: THING.BaseObject;
    path: THING.BaseObject[];
}) => void;

/**
 * @param onStop - The callback function would be trigged when stop level change.
 * @param onComplete - The callback function would be trigged when complete level change.
 */
declare type LevelChangeOptions = any;

/**
 * The function to call when start to get object level path.
 * @param path - The level path.
 */
declare type FilterLevelPathCallback = (path: THING.BaseObject[]) => THING.BaseObject[];

/**
 * @property start - The start function.
 * @property stop - The stop function.
 * @property times - The repeat times setting function.
 * @property easing - The lerp setting function.
 * @property looping - The looping setting function.
 * @property onRepeat - When repeat callback function.
 * @property onStart - When start callback function.
 * @property onStop - When start callback function.
 * @property onUpdate - When update callback function.
 * @property onComplete - When complete callback function.
 */
declare type LerpToResult = {
    start: (...params: any[]) => any;
    stop: (...params: any[]) => any;
    times: (...params: any[]) => any;
    easing: (...params: any[]) => any;
    looping: (...params: any[]) => any;
    onRepeat: (...params: any[]) => any;
    onStart: (...params: any[]) => any;
    onStop: (...params: any[]) => any;
    onUpdate: (...params: any[]) => any;
    onComplete: (...params: any[]) => any;
};

/**
 * @property name - The animation name.
 * @property times? - The loop times.
 * @property loopType? - The loop type.
 * @property [speed = 1] - The playing speed.
 * @property [reverse = false] - True indicates to play in reverse mode.
 * @property [onComplete = null] - The callback function to receive complete event.
 */
declare type PlayAnimationArgs = {
    name: string;
    times?: number;
    loopType?: LoopType;
    speed?: number;
    reverse?: boolean;
    onComplete?: (...params: any[]) => any;
};

/**
 * @property name - The name.
 * @property duration - The duration in seconds.
 * @property speed - The playing speed.
 * @property state - The state type.
 */
declare type AnimationResult = {
    name: string;
    duration: number;
    speed: number;
    state: PlayStateType;
};

/**
 * @property [name = ''] - The name.
 * @property [id = ''] - The id.
 */
declare type BaseObjectInitialOptions = {
    name?: string;
    id?: string;
};

/**
 * @property type - The event type.
 * @property condition - The condition to select objects.
 * @property callback - The event callback.
 * @property tag - The event tag.
 * @property priority - The event priority.
 * @property once - True indicates it's trigger only once event.
 * @property paused - True indicates it had paused.
 */
declare type ObjectListenerInfo = {
    type: string;
    condition: string;
    callback: (...params: any[]) => any;
    tag: string;
    priority: number;
    once: boolean;
    paused: boolean;
};

/**
 * @property useCapture - True indicates capture all same events from children.
 */
declare type ObjectEventOptions = {
    useCapture: boolean;
};

/**
 * @property recursive - True indicates query in recursive mode.
 * @property includeSelf - True indicates including self.
 */
declare type ObjectQueryOptions = {
    recursive: boolean;
    includeSelf: boolean;
};

/**
 * @property width - The width.
 * @property height - The height.
 * @property near - The near.
 * @property far - The far.
 */
declare type ShadowRangeInfo = {
    width: number;
    height: number;
    near: number;
    far: number;
};

/**
 * @property center - The center of box.
 * @property halfSize - The half size of box.
 */
declare type BoundingBoxResult = {
    center: Number[];
    halfSize: Number[];
};

/**
 * @property direction - The direction in world space.
 * @property height - The height.
 */
declare type ClippingPlaneResult = {
    direction: Number[];
    height: number;
};

/**
 * The lensflare element.
 * @property imageTexture - The element image texture resource.
 * @property color - The element color.
 * @property scale - The element scale.
 * @property offset - The element offset.
 */
declare type LensflareElement = {
    imageTexture: ImageTexture;
    color: Number[];
    scale: number;
    offset: number;
};

/**
 * @property localPosition? - The local position.
 * @property localScale? - The local scale.
 * @property localAngels? - The local angles.
 * @property position? - The world position.
 * @property scale? - The world scale.
 * @property angels? - The world angles.
 */
declare type Object3DInitialOptions = BaseObjectInitialOptions;

/**
 * The function to call when start to process some action with object(s).
 * @param object - The object.
 */
declare type ProcessObjectCallback = (object: Object3D) => boolean;

/**
 * @property visible? - The visible attributes inherit type (default value is InheritType.Normal).
 * @property pickable? - The visible attributes inherit type (default value is InheritType.Normal).
 */
declare type InheritData = {
    visible?: InheritType;
    pickable?: InheritType;
};

/**
 * @property origin - The start position.
 * @property direction - The direction in world space.
 */
declare type RaycastInfo = {
    origin: Number[];
    direction: Number[];
};

/**
 * @property object - The picked object.
 * @property position - The picked position.
 * @property distance - The distance to ray origin.
 */
declare type RaycastResult = {
    object: THING.Object3D;
    position: Number[];
    distance: number;
};

/**
 * @property url - The url.
 * @property localPosition? - The local position.
 * @property localAngles? - The local angles.
 * @property localScale? - The local scale.
 * @property children? - The children.
 */
declare type ResourceResult = {
    url: string;
    localPosition?: Number[];
    localAngles?: Number[];
    localScale?: Number[];
    children?: ResourceResult[];
};

/**
 * @property vertices - The number of vertices.
 * @property triangles - The number of triangles.
 * @property materials - The number of materials.
 * @property textures - The number of textures.
 */
declare type RenderableNodeGeometryInfo = {
    vertices: number;
    triangles: number;
    materials: number;
    textures: number;
};

/**
 * @property angles - The angles base on center.
 * @property center - The center world position.
 * @property size - The bounding box size.
 * @property halfSize - The bounding box half size.
 * @property radius - The bounding box radius.
 */
declare type OrientedBoxResult = {
    angles: Number[];
    center: Number[];
    size: Number[];
    halfSize: Number[];
    radius: number;
};

/**
 * @property from - The source attributes.
 * @property to - The target attributes.
 * @property [loop = -1] - The loop times, -1 indicates unlimited, and set the loop type to repeat.
 * @property [times = -1] - The loop times, -1 indicates unlimited.
 * @property [duration = 1000] - The time in milliseconds.
 * @property [delayTime = 0] - The delay time in milliseconds.
 * @property lerpType? - The lerp type.
 * @property loopType? - The loop type.
 * @property orientToPath? - Whether to face the path when moving.
 * @property onRepeat - The callback function to trigger repeat action.
 * @property onStart - The callback function to trigger start action.
 * @property onStop - The callback function to trigger stop action.
 * @property onUpdate - The callback function to trigger update action.
 * @property onComplete - The callback function to trigger complete action.
 */
declare type LerpArgs = {
    from: any;
    to: any;
    loop?: number;
    times?: number;
    duration?: number;
    delayTime?: number;
    lerpType?: LerpType;
    loopType?: LoopType;
    orientToPath?: boolean;
    onRepeat: (...params: any[]) => any;
    onStart: (...params: any[]) => any;
    onStop: (...params: any[]) => any;
    onUpdate: (...params: any[]) => any;
    onComplete: (...params: any[]) => any;
};

/**
 * The position/rotate/scale lerp args.
 * @param [spaceType = THING.SpaceType.World] - The space type.
 */
declare type LerpWithSpaceTypeArgs = LerpArgs;

/**
 * @param up - The up direction.
 * @param [closure = false] - True indicates it's closure path.
 */
declare type MovePathLerpArgs = LerpWithSpaceTypeArgs;

/**
 * @property position - The position where to fly.
 * @property target - The target where to fly, if it's object then auto select the best position from its bounding box.
 * @property duration - The action time in milliseconds.
 * @property delayTime - The delay time in milliseconds.
 * @property distance - The distance(only works for object target mode).
 * @property horzAngle - The horz angle(only works for object target mode).
 * @property vertAngle - The vert angle(only works for object target mode).
 * @property lerpType - The lerp type.
 * @property positionLerpType - The position lerp type.
 * @property targetLerpType - The target lerp type.
 * @property upLerpType - The lerp type.
 * @property onStart - The start callback function.
 * @property onStop - The stop callback function.
 * @property onUpdate - The update callback function.
 * @property onComplete - The complete callback function.
 */
declare type LerpFlyToArgs = {
    position: Number[];
    target: Number[] | THING.BaseObject;
    duration: number;
    delayTime: number;
    distance: number;
    horzAngle: number;
    vertAngle: number;
    lerpType: LerpType;
    positionLerpType: LerpType;
    targetLerpType: LerpType;
    upLerpType: LerpType;
    onStart: (...params: any[]) => any;
    onStop: (...params: any[]) => any;
    onUpdate: (...params: any[]) => any;
    onComplete: (...params: any[]) => any;
};

/**
 * @property up - The up direction.
 * @property [lockAxis] - The lock axis type.
 * @property [always = false] - True indicates look at target always
 * @property [lookOnPlane = false] - True indicates look on target's plane by its forward.
 */
declare type LookAtArgs = {
    up: Number[];
    lockAxis?: AxisType;
    always?: boolean;
    lookOnPlane?: boolean;
};

/**
 * The particle's maximum age attribute.
 * @property value - A number describing the amount of maxAge to apply to all particles.
 * @property spread - A number describing the maxAge variance on a per-particle basis.
 */
declare type MaxAge = {
    value: number;
    spread: number;
};

/**
 * The emitter's position attribute.
 * @property value - An array describing this emitter's base position.
 * @property spread - An array describing this emitter's position variance on a per-particle basis.
 * @property spreadClamp - An array describing the numeric multiples the particle's should be spread out over.
 * @property radius - This emitter's base radius.
 * @property radiusScale - An array describing the radius's scale in all three axes.
 * @property distribution - A specific distribution to use when radiusing particles. Overrides the `ParticleEmitterAttributeType.Distribution` option.
 * @property randomise - When a particle is re-spawned, whether it's position should be re-randomised or not.
 */
declare type Position = {
    value: Number[];
    spread: Number[];
    spreadClamp: Number[];
    radius: number;
    radiusScale: Number[];
    distribution: number;
    randomise: boolean;
};

/**
 * The emitter's rotation attribute.
 * @property axis - An array describing this emitter's axis of rotation.
 * @property axisSpread - An array describing the amount of variance to apply to the axis of rotation on a per-particle basis.
 * @property angle - The angle of rotation, given in radians. If `Rotation.static` is true, the emitter will start off rotated at this angle, and stay as such.
                         Otherwise, the particles will rotate from 0radians to this value over their lifetimes.
 * @property angleSpread - The amount of variance in each particle's rotation angle.
 * @property static - Whether the rotation should be static or not.
 * @property center - An array describing the center point of rotation.
 * @property randomise - When a particle is re-spawned, whether it's rotation should be re-randomised or not.
 */
declare type Rotation = {
    axis: Number[];
    axisSpread: Number[];
    angle: number;
    angleSpread: number;
    static: boolean;
    center: Number[];
    randomise: boolean;
};

/**
 * The emitter's velocity attribute.
 * @property value - An array describing this emitter's base velocity.
 * @property spread - An array describing this emitter's velocity variance on a per-particle basis.
 * @property distribution - A specific distribution to use when calculating a particle's velocity. Overrides the `ParticleEmitterAttributeType.Distribution` option.
 * @property randomise - When a particle is re-spawned, whether it's velocity should be re-randomised or not.
 */
declare type Velocity = {
    value: Number[];
    spread: Number[];
    distribution: number;
    randomise: boolean;
};

/**
 * The emitter's color attribute.
 * @property value - Either an array, or multiple arrays to describe the color of a particle over it's lifetime.
 * @property spread - Either an array, or multiple arrays to describe the color variance of a particle over it's lifetime.
 * @property randomise - When a particle is re-spawned, whether it's color should be re-randomised or not.
 */
declare type ListColor = {
    value: Number[];
    spread: Number[];
    randomise: boolean;
};

/**
 * The emitter's opacity attribute.
 * @property value - Either a number, or an array of numbers to describe the opacity of a particle over it's lifetime.
 * @property spread - Either a number, or an array of numbers to describe the opacity variance of a particle over it's lifetime.
 * @property randomise - When a particle is re-spawned, whether it's opacity should be re-randomised or not.
 */
declare type ListOpacity = {
    value: number;
    spread: number;
    randomise: boolean;
};

/**
 * The emitter's size attribute.
 * @property value - Either a number, or an array of numbers to describe the size of a particle over it's lifetime.
 * @property spread - Either a number, or an array of numbers to describe the size variance of a particle over it's lifetime.
 * @property randomise - When a particle is re-spawned, whether it's size should be re-randomised or not.
 */
declare type ListSize = {
    value: number;
    spread: number;
    randomise: boolean;
};

/**
 * The emitter's angle attribute.
 * @property value - Either a number, or an array of numbers to describe the angle of a particle over it's lifetime.
 * @property spread - Either a number, or an array of numbers to describe the angle variance of a particle over it's lifetime.
 * @property randomise - When a particle is re-spawned, whether it's angle should be re-randomised or not.
 */
declare type ListAngle = {
    value: number;
    spread: number;
    randomise: boolean;
};

/**
 * The emitter's acceleration attribute.
 * @property value - An array describing this emitter's base acceleration.
 * @property spread - An array describing this emitter's acceleration variance on a per-particle basis.
 * @property distribution - A specific distribution to use when calculating a particle's acceleration. Overrides the `ParticleEmitterAttributeType.Distribution` option.
 * @property randomise - When a particle is re-spawned, whether it's acceleration should be re-randomised or not.
 */
declare type Acceleration = {
    value: Number[];
    spread: Number[];
    distribution: number;
    randomise: boolean;
};

/**
 * The emitter's drag attribute.
 * @property value - A number between 0 and 1 describing the amount of drag to apply to all particles.
 * @property spread - A number describing the drag variance on a per-particle basis.
 * @property randomise - When a particle is re-spawned, whether it's drag should be re-randomised or not.
 */
declare type Drag = {
    value: number;
    spread: number;
    randomise: boolean;
};

/**
 * The pixel buffer with size.
 * @property data - The pixel buffer data.
 * @property width - The buffer width.
 * @property height - The buffer height.
 */
declare type PixelBuffer = {
    data: any;
    width: number;
    height: number;
};

/**
 * The pixel buffer with size.
 * @property resource - The pixel buffer data.
 */
declare type CanvasResource = {
    resource: HTMLElement;
};

/**
 * @property enable - True indicates enable it.
 * @property color - The color.
 * @property opacity - The opacity.
 * @property glow - True indicates enable glow effect.
 */
declare type StyleEdgeResult = {
    enable: boolean;
    color: Number[];
    opacity: number;
    glow: boolean;
};

/**
 * @property glow - The glow intensity (null indicates resume original effect).
 * @property innerGlow - The inner glow effect (null indicates resume original effect).
 * @property lineBloom - The line bloom effect (null indicates resume original effect).
 * @property tailing - The tailing effect (null indicates resume original effect).
 * @property radial - The radial effect (null indicates resume original effect).
 * @property ghosting - The ghosting effect (null indicates resume original effect).
 */
declare type StyleEffectResult = {
    glow: number;
    innerGlow: boolean;
    lineBloom: boolean;
    tailing: boolean;
    radial: boolean;
    ghosting: boolean;
};

declare type StyleImagesResult = {
    map: any;
    envMap: any;
    alphaMap: any;
    emissiveMap: any;
    normalMap: any;
    colorMapping: any;
    aoMap: any;
};

/**
 * @property offset - The offset of UV matrix, default: [0, 0]
 * @property repeat - The repeat of UV matrix, default: [1, 1]
 * @property center - The center of UV matrix, default: [0, 0]
 * @property rotation - The rotation in degree.
 */
declare type StyleUVMatrixResult = {
    offset: Number[];
    repeat: Number[];
    center: Number[];
    rotation: number;
};

/**
 * The function to call when update value.
 * @param baseValue - The base value.
 * @param style - The style.
 */
declare type StyleValueOperationCallback = (baseValue: number, style: THING.Style) => void;

/**
 * The function to call when update color.
 * @param baseValue - The base color.
 * @param style - The style.
 */
declare type StyleColorOperationCallback = (baseValue: Number[], style: THING.Style) => void;

/**
 * The function to call when to get objects by forEach.
 * @param object - The object.
 * @param index - The index of objects.
 * @param objects - The objects.
 */
declare type OnTraverseObjectsInSelector = (object: THING.BaseObject, index: number, objects: THING.BaseObject[]) => void;

/**
 * The function to call when to get objects by map.
 * @param object - The object.
 * @param index - The index of objects.
 * @param objects - The objects.
 */
declare type OnMapObjectsInSelector = (object: THING.BaseObject, index: number, objects: THING.BaseObject[]) => THING.BaseObject;

/**
 * The function to call when to reduce in selector.
 * @param accumulator - The accumulate value.
 * @param currentValue - The current value.
 * @param currentIndex - The current index.
 * @param objects - The objects.
 */
declare type OnReduceObjectsInSelector = (accumulator: number, currentValue: number, currentIndex: number, objects: THING.BaseObject[]) => number;

/**
 * The function to call when to get objects by filter.
 * @param object - The object.
 * @param index - The index of objects.
 * @param objects - The objects.
 */
declare type OnFilterObjectsInSelector = (object: THING.BaseObject, index: number, objects: THING.BaseObject[]) => boolean;

/**
 * The function to call when to sort objects.
 * @param obj1 - The first object.
 * @param obj2 - The second object.
 */
declare type OnSortObjectsInSelector = (obj1: THING.BaseObject, obj2: THING.BaseObject) => number;

